open HolKernel Parse

open binariesLib;
open binariesTheory;
open binariesCfgLib;
open binariesMemLib;
open bir_symbexec_stateLib;
open bir_symbexec_coreLib;
open bir_symbexec_stepLib;
open bir_symbexec_sumLib;
open bir_block_collectionLib;
open bir_programSyntax;
open bir_valuesSyntax;
open bir_immSyntax;
open bir_exec_typingLib;
open commonBalrobScriptLib;
open binariesDefsLib;
open bir_cfgLib;
open bir_cfg_m0Lib;
open bir_symbexec_driverLib;
open Redblackmap;
open bir_symbexec_oracleLib;
open bir_symbexec_oracleLib;


(*Server*)   (*  
val lbl_tm = ``BL_Address (Imm64 4203632w)``;

val stop_lbl_tms = [``BL_Address (Imm64 4203760w)``];    
(*Client*)   *)  
val lbl_tm = ``BL_Address (Imm64 4203632w)``;

val stop_lbl_tms = [``BL_Address (Imm64 4203756w)``]; 

val n_dict = bir_cfgLib.cfg_build_node_dict bl_dict_ prog_lbl_tms_;


val adr_dict = bir_symbexec_PreprocessLib.fun_addresses_dict bl_dict_ prog_lbl_tms_;
val syst = init_state lbl_tm prog_vars;

val pred_conjs = [``bir_exp_true``];
    
val syst = state_add_preds "init_pred" pred_conjs syst;

val _ = print "initial state created.\n\n";

val cfb = false;
val systs = symb_exec_to_stop (abpfun cfb) n_dict bl_dict_ [syst] stop_lbl_tms adr_dict [];
val _ = print "\n\n";
val _ = print "finished exploration of all paths.\n\n";
val _ = print ("number of stopped symbolic execution states: " ^ (Int.toString (length systs)));
val _ = print "\n\n";

val (systs_noassertfailed, systs_assertfailed) =
    List.partition (fn syst => not (identical (SYST_get_status syst) BST_AssertionViolated_tm)) systs;
val _ = print ("number of \"assert failed\" paths found: " ^ (Int.toString (length systs_assertfailed)));
val _ = print "\n";     
val _ = print ("number of \"no assert failed\" paths found: " ^ (Int.toString (length systs_noassertfailed)));
val _ = print "\n";




(* Define a datatype for binary trees *)
datatype 'a tree = Leaf | Node of 'a * 'a tree | Branch of 'a tree * 'a tree;



(* Define a function to create a tree from two lists *)
fun listsToTree [] [] = Leaf
  | listsToTree [] (y::ys) = Node (y, listsToTree [] ys)
  | listsToTree (x::xs) [] = Node (x, listsToTree xs [])
  | listsToTree (x::xs) (y::ys) =
    if identical x y 
    then Node (x, listsToTree xs ys)
    else Branch ((Node (x,(listsToTree xs []))),(Node (y,(listsToTree [] ys))));


val a = rev(SYST_get_pred (List.nth (systs, 1)));
val b = rev(SYST_get_pred (List.nth (systs, 3)));
val c = listsToTree a b;
    
val predlists = List.map (fn syst => ((rev o SYST_get_pred) syst))
                         systs;

fun allHeadsEqual ([]: term list list) = false
| allHeadsEqual (lst: term list list) =
  let
    val hdOfFirstList = hd lst
    fun compareHeads ([]: term list list) = true
      | compareHeads ((h: term list)::t) = if (identical (hd hdOfFirstList) (hd h)) then compareHeads t else false
  in
    compareHeads lst
  end;


fun HeadsEqual ([]: term list) = false
| HeadsEqual (lst: term list) =
  let
    val hdOfFirstList = hd lst
    fun compareHeads ([]: term list) = true
      | compareHeads ((h: term)::t) = if (identical hdOfFirstList h) then compareHeads t else false
  in
    compareHeads lst
  end;    


(*
val lst =[  [
     “BVar "31_assert_true_cnd" BType_Bool”,
     “BVar "34_assert_true_cnd" BType_Bool”,
     “BVar "39_assert_true_cnd" BType_Bool”,
     “BVar "44_assert_true_cnd" BType_Bool”, “BVar "48_OTP" BType_Bool”,
     “BVar "48_OTP" BType_Bool”, “BVar "50_T" BType_Bool”,
     “BVar "51_assert_true_cnd" BType_Bool”,
     “BVar "54_assert_false_cnd" BType_Bool”],
    [“BVar "31_assert_true_cnd" BType_Bool”,
     “BVar "34_assert_true_cnd" BType_Bool”,
     “BVar "39_assert_true_cnd" BType_Bool”,
     “BVar "44_assert_true_cnd" BType_Bool”, “BVar "48_OTP" BType_Bool”,
     “BVar "48_OTP" BType_Bool”, “BVar "50_T" BType_Bool”,
     “BVar "51_assert_true_cnd" BType_Bool”,
     “BVar "53_assert_true_cnd" BType_Bool”,
     “BVar "57_assert_false_cnd" BType_Bool”]];
    
predlist_to_tree predlists
 *)
    
fun predlist_to_tree ([[]]: term list list) = Leaf
  | predlist_to_tree (lst: term list list) =    
    if allHeadsEqual lst then
	Node ((hd (hd lst)), (predlist_to_tree (List.map (fn ls => (tl ls)) lst)))
    else
	(let val (head_noteq, head_eq) = List.partition (HeadsEqual) lst in
	    Branch ((predlist_to_tree head_noteq),(predlist_to_tree head_eq))	
	end)
 
		

