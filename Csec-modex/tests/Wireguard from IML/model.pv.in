
free c_in.
free c_out.

(********************************
  Crypto
*********************************)
fun true/0.
data c_32/0.
fun pars1/1.
equation pars1(x) = x.
data pair/2.
data triple/3.

reduc pars12(pair(x_1, x_2),c_32) = x_1.

reduc pars22(pair(x_1, x_2),c_32) = x_2.

reduc pars13(triple(x_1, x_2, x_3),c_32) = x_1.

reduc pars23(triple(x_1, x_2, x_3),c_32) = x_2.

reduc pars33(triple(x_1, x_2, x_3),c_32) = x_3.


fun hash1/1.
fun hash2/2.
fun AEAD/3.

fun kdf1/2.
fun kdf2/2.
fun kdf3/2.

fun DH/2.
fun expdh/2.
data g/0.
data Q/0.
data epsilon_950/0.
data ts_i/0. 
data Construction/0.
data c_1/0.
data c_2/0.
data c_3/0.
data Init/0.
data Resp/0.

reduc dec(AEAD(k, p, a), k) = p.

reduc verify(AEAD(k, p, a), a, k) = true.

equation DH(x,y) = expdh(y,x).

equation kdf1(key,input) = hash2(hash2(key,input),c_1()).

equation kdf2(key,input) = pair(hash2(hash2(key,input),c_1()),hash2(hash2(key,input),hash2(hash2(hash2(key,input),c_1()),c_2()))).

equation kdf3(key,input) = triple(hash2(hash2(key,input),c_1()),hash2(hash2(key,input),hash2(hash2(hash2(key,input),c_1()),c_2())), hash2(hash2(key,input), hash2(hash2(hash2(key,input),hash2(hash2(hash2(key,input),c_1()),c_2())),c_3))).

(*************************** 
  Encoders 
***************************)


(******************** 
  Parsers 
********************)


(*************************** 
  Arithmetic Functions 
***************************)



(*************************** 
  Encoders 
***************************)


(******************** 
  Parsers 
********************)


(*************************** 
  Arithmetic Functions 
***************************)


(********************************
  <Query>
*********************************)

(* Authentication property *)

query attacker:Spriv_i.
query attacker:Spriv_r.

query ev:RespRecv(Init,Resp,expdh(g,i),expdh(g,r)) ==> ev:InitStart(Init,Resp,expdh(g,i),expdh(g,r)) | attacker:i | attacker:r.

query ev:InitAccept(Init,Resp,expdh(g,i),expdh(g,r)) ==> ev:RespAnsw(Init,Resp,expdh(g,i),expdh(g,r)) | attacker:i | attacker:r.

(* Sanity check *)

query ev:InitStart(Init,Resp,i,j).
query ev:InitAccept(Init,Resp,i,j).
query ev:RespRecv(Init,Resp,i,j).
query ev:RespAnsw(Init,Resp,i,j).


(*************************** 
  Model 
***************************)

let client = 0 .

let server = 0 .

(********************************
  <Environment>
*********************************)

process
 !(
	new Spriv_i;
	let Spub_i = expdh(g,Spriv_i) in
	out(c_out, Spub_i);
	!(
	   new Spriv_r;
	   let Spub_r = expdh(g,Spriv_r) in
	   out(c_out, Spub_r);
           ((!client) | (!server))
	)
  )

