
channel c_in, c_out. 

param N.

(************************
  Types
*************************)

type fixed_20 [fixed, large].
type fixed_21 [fixed, large].
type fixed_64 [fixed, large].

(************************
  XOR
*************************)
fun conc1(fixed_64): fixed_64 [compos].

expand Xor(fixed_64, exclusive_or).

(************************
  <Query>
*************************)

query secret OTP_48.
(* 
event bad(fixed_64).

query x: fixed_64; event bad(x) ==> false.

event Secret(fixed_64).
event Guess(fixed_64).

query x: fixed_64; event Guess(x) && Secret(x) ==> false. *)
(************************
  <Model>
*************************)

(*
  We need to include nonce1 somewhere, because otherwise CV complains about the query.
  In the output this process is erased and replaced by the actual extracted model, 
  so soundness is not compromised.
*)
let client = 
  in(c_in, ()); 
  new OTP_48: fixed_64; 
  yield .
  
let server = 0 .

(************************
  <Environment>
*************************)

let server' =
  in(c_in, (argv0: bitstring, 
            argv1: bitstring,
            argv2: bitstring,
            argv3: bitstring,
            argv4: bitstring));
  out(c_out, ());
  server .

let client' =
  in(c_in, (argv0: bitstring, 
            argv1: bitstring,
            argv2: bitstring,
            argv3: bitstring,
            argv4: bitstring));
  out(c_out, ());
  client .

process
! N (
  in(c_in, ());

  (* one-time pad *)
  new pad: fixed_64;

  out(c_out, ());
  (client' | server')
)
