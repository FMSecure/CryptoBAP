
Doing expand if, let, find... No change.
Doing simplify... Run simplify 2 time(s). Fixpoint reached.
Done.
Doing move all binders... No change.
Doing remove assignments of useless... Done.
Trying equivalence
equiv ! !_9 <= @2_N3 new @2_r: bounded_1000_mkeyseed; (
  ! !_10 <= @2_N @2_Omac(@2_x: bitstring) := HMAC_sha1(@2_x, mkgen(@2_r)),
  ! !_11 <= @2_N2 @2_Ocheck(@2_m: bitstring, @2_ma: fixed_20_hash) := HMAC_sha1_check(@2_m, mkgen(@2_r), @2_ma))
<=(@2_N3 * Pmac(time + (@2_N3 - 1.) * (time(mkgen) + @2_N * time(HMAC_sha1, maxlength(@2_x[!_10, !_9])) + @2_N2 * time(HMAC_sha1_check, maxlength(@2_m[!_11, !_9]))), @2_N, @2_N2, max(maxlength(@2_x[!_10, !_9]), maxlength(@2_m[!_11, !_9]))))=> [computational]
      ! !_12 <= @2_N3 new @2_r: bounded_1000_mkeyseed [unchanged]; (
  ! !_13 <= @2_N @2_Omac(@2_x_30: bitstring) := let @2_x: bitstring = @2_x_30 in @2_mac2(@2_x, @2_mkgen2(@2_r)),
  ! !_14 <= @2_N2 @2_Ocheck(@2_m: bitstring, @2_ma: fixed_20_hash) := find @2_j <= @2_N suchthat defined(@2_x[@2_j]) && ((@2_m = @2_x[@2_j]) && @2_check2(@2_x[@2_j], @2_mkgen2(@2_r), @2_ma)) then true else false)
... Failed.
Doing remove assignments of binder key... Done.
Trying equivalence
equiv ! !_9 <= @2_N3 new @2_r: bounded_1000_mkeyseed; (
  ! !_10 <= @2_N @2_Omac(@2_x: bitstring) := HMAC_sha1(@2_x, mkgen(@2_r)),
  ! !_11 <= @2_N2 @2_Ocheck(@2_m: bitstring, @2_ma: fixed_20_hash) := HMAC_sha1_check(@2_m, mkgen(@2_r), @2_ma))
<=(@2_N3 * Pmac(time + (@2_N3 - 1.) * (time(mkgen) + @2_N * time(HMAC_sha1, maxlength(@2_x[!_10, !_9])) + @2_N2 * time(HMAC_sha1_check, maxlength(@2_m[!_11, !_9]))), @2_N, @2_N2, max(maxlength(@2_x[!_10, !_9]), maxlength(@2_m[!_11, !_9]))))=> [computational]
      ! !_12 <= @2_N3 new @2_r: bounded_1000_mkeyseed [unchanged]; (
  ! !_13 <= @2_N @2_Omac(@2_x_30: bitstring) := let @2_x: bitstring = @2_x_30 in @2_mac2(@2_x, @2_mkgen2(@2_r)),
  ! !_14 <= @2_N2 @2_Ocheck(@2_m: bitstring, @2_ma: fixed_20_hash) := find @2_j <= @2_N suchthat defined(@2_x[@2_j]) && ((@2_m = @2_x[@2_j]) && @2_check2(@2_x[@2_j], @2_mkgen2(@2_r), @2_ma)) then true else false)
with keyseed... Succeeded.
Doing simplify... Run simplify 2 time(s). Fixpoint reached.
Done.
Doing move all binders... No change.
Doing remove assignments of useless... Done.
Proved query event server_recv(x) ==> client_send(x)
===================== Proof starts =======================
Initial state
Game 1 is
! !_15 <= N
in(c_in[!_15], payload: bounded_1000_payload);
new keyseed: bounded_1000_mkeyseed;
let key: bounded_1000_mkey = mkgen(keyseed) in
out(c_out[!_15], ());
! !_16 <= N
(
  in(c_in[!_16, !_15], (argv0_22: bitstring, argv1_21: bitstring, argv2_20: bitstring, argv3_19: bitstring, argv4_18: bitstring));
  out(c_out[!_16, !_15], ());
  in(c_in[!_16, !_15], ());
  event client_send(payload);
  let Conc1_188_0: bitstring = conc1(payload) in
  let HMAC_192_0: fixed_20_hash = HMAC(arithmetic1, Conc1_188_0, key) in
  let Conc2_196_0: bitstring = conc2(payload, HMAC_192_0) in
  out(c_out[!_16, !_15], Conc2_196_0)
) | (
  ! !_17 <= N
  in(c_in[!_17, !_16, !_15], (argv0_27: bitstring, argv1_26: bitstring, argv2_25: bitstring, argv3_24: bitstring, argv4_23: bitstring));
  out(c_out[!_17, !_16, !_15], ());
  in(c_in[!_17, !_16, !_15], a_113_0: bitstring);
  let Pars1_236_0: bounded_1000_payload = pars1(a_113_0) in
  let Conc1_259_0: bitstring = conc1(Pars1_236_0) in
  let HMAC_263_0: fixed_20_hash = HMAC(arithmetic1, Conc1_259_0, key) in
  let Pars2_274_0: fixed_20_hash = pars2(a_113_0) in
  if (HMAC_263_0 = Pars2_274_0) then
  event server_recv(Pars1_236_0)
)


Applying simplify yields

Game 2 is
! !_15 <= N
in(c_in[!_15], payload: bounded_1000_payload);
new keyseed: bounded_1000_mkeyseed;
let key: bounded_1000_mkey = mkgen(keyseed) in
out(c_out[!_15], ());
! !_16 <= N
(
  in(c_in[!_16, !_15], (argv0_22: bitstring, argv1_21: bitstring, argv2_20: bitstring, argv3_19: bitstring, argv4_18: bitstring));
  out(c_out[!_16, !_15], ());
  in(c_in[!_16, !_15], ());
  event client_send(payload);
  let Conc1_188_0: bitstring = conc1(payload) in
  let HMAC_192_0: fixed_20_hash = HMAC_sha1(Conc1_188_0, key) in
  let Conc2_196_0: bitstring = conc2(payload, HMAC_192_0) in
  out(c_out[!_16, !_15], Conc2_196_0)
) | (
  ! !_17 <= N
  in(c_in[!_17, !_16, !_15], (argv0_27: bitstring, argv1_26: bitstring, argv2_25: bitstring, argv3_24: bitstring, argv4_23: bitstring));
  out(c_out[!_17, !_16, !_15], ());
  in(c_in[!_17, !_16, !_15], a_113_0: bitstring);
  let Pars1_236_0: bounded_1000_payload = pars1(a_113_0) in
  let Conc1_259_0: bitstring = conc1(Pars1_236_0) in
  let HMAC_263_0: fixed_20_hash = HMAC_sha1(Conc1_259_0, key) in
  let Pars2_274_0: fixed_20_hash = pars2(a_113_0) in
  if HMAC_sha1_check(Conc1_259_0, key, Pars2_274_0) then
  event server_recv(Pars1_236_0)
)


Applying remove assignments of useless yields

Game 3 is
! !_15 <= N
in(c_in[!_15], payload: bounded_1000_payload);
new keyseed: bounded_1000_mkeyseed;
let key: bounded_1000_mkey = mkgen(keyseed) in
out(c_out[!_15], ());
! !_16 <= N
(
  in(c_in[!_16, !_15], (argv0_22: bitstring, argv1_21: bitstring, argv2_20: bitstring, argv3_19: bitstring, argv4_18: bitstring));
  out(c_out[!_16, !_15], ());
  in(c_in[!_16, !_15], ());
  event client_send(payload);
  let Conc1_188_0: bitstring = conc1(payload) in
  let HMAC_192_0: fixed_20_hash = HMAC_sha1(Conc1_188_0, key) in
  let Conc2_196_0: bitstring = conc2(payload, HMAC_192_0) in
  out(c_out[!_16, !_15], Conc2_196_0)
) | (
  ! !_17 <= N
  in(c_in[!_17, !_16, !_15], (argv0_27: bitstring, argv1_26: bitstring, argv2_25: bitstring, argv3_24: bitstring, argv4_23: bitstring));
  out(c_out[!_17, !_16, !_15], ());
  in(c_in[!_17, !_16, !_15], a_113_0: bitstring);
  let Pars1_236_0: bounded_1000_payload = pars1(a_113_0) in
  let Conc1_259_0: bitstring = conc1(Pars1_236_0) in
  let Pars2_274_0: fixed_20_hash = pars2(a_113_0) in
  if HMAC_sha1_check(Conc1_259_0, key, Pars2_274_0) then
  event server_recv(Pars1_236_0)
)


Applying remove assignments of binder key yields

Game 4 is
! !_15 <= N
in(c_in[!_15], payload: bounded_1000_payload);
new keyseed: bounded_1000_mkeyseed;
out(c_out[!_15], ());
! !_16 <= N
(
  in(c_in[!_16, !_15], (argv0_22: bitstring, argv1_21: bitstring, argv2_20: bitstring, argv3_19: bitstring, argv4_18: bitstring));
  out(c_out[!_16, !_15], ());
  in(c_in[!_16, !_15], ());
  event client_send(payload);
  let Conc1_188_0: bitstring = conc1(payload) in
  let HMAC_192_0: fixed_20_hash = HMAC_sha1(Conc1_188_0, mkgen(keyseed)) in
  let Conc2_196_0: bitstring = conc2(payload, HMAC_192_0) in
  out(c_out[!_16, !_15], Conc2_196_0)
) | (
  ! !_17 <= N
  in(c_in[!_17, !_16, !_15], (argv0_27: bitstring, argv1_26: bitstring, argv2_25: bitstring, argv3_24: bitstring, argv4_23: bitstring));
  out(c_out[!_17, !_16, !_15], ());
  in(c_in[!_17, !_16, !_15], a_113_0: bitstring);
  let Pars1_236_0: bounded_1000_payload = pars1(a_113_0) in
  let Conc1_259_0: bitstring = conc1(Pars1_236_0) in
  let Pars2_274_0: fixed_20_hash = pars2(a_113_0) in
  if HMAC_sha1_check(Conc1_259_0, mkgen(keyseed), Pars2_274_0) then
  event server_recv(Pars1_236_0)
)


Applying equivalence
equiv ! !_9 <= @2_N3 new @2_r: bounded_1000_mkeyseed; (
  ! !_10 <= @2_N @2_Omac(@2_x: bitstring) := HMAC_sha1(@2_x, mkgen(@2_r)),
  ! !_11 <= @2_N2 @2_Ocheck(@2_m: bitstring, @2_ma: fixed_20_hash) := HMAC_sha1_check(@2_m, mkgen(@2_r), @2_ma))
<=(@2_N3 * Pmac(time + (@2_N3 - 1.) * (time(mkgen) + @2_N * time(HMAC_sha1, maxlength(@2_x[!_10, !_9])) + @2_N2 * time(HMAC_sha1_check, maxlength(@2_m[!_11, !_9]))), @2_N, @2_N2, max(maxlength(@2_x[!_10, !_9]), maxlength(@2_m[!_11, !_9]))))=> [computational]
      ! !_12 <= @2_N3 new @2_r: bounded_1000_mkeyseed [unchanged]; (
  ! !_13 <= @2_N @2_Omac(@2_x_30: bitstring) := let @2_x: bitstring = @2_x_30 in @2_mac2(@2_x, @2_mkgen2(@2_r)),
  ! !_14 <= @2_N2 @2_Ocheck(@2_m: bitstring, @2_ma: fixed_20_hash) := find @2_j <= @2_N suchthat defined(@2_x[@2_j]) && ((@2_m = @2_x[@2_j]) && @2_check2(@2_x[@2_j], @2_mkgen2(@2_r), @2_ma)) then true else false)
with keyseed [probability N * Pmac(time(context for game 4) + time + (-1. * N * N + N * N * N) * time(HMAC_sha1_check, maxlength(game 4: Conc1_259_0[!_17, !_16, !_15])) + (-1. * N + N * N) * time(HMAC_sha1, maxlength(game 4: Conc1_188_0[!_16, !_15])) + (-1. + N) * time(mkgen), N, N * N, max(maxlength(game 4: Conc1_259_0[!_17, !_16, !_15]), maxlength(game 4: Conc1_188_0[!_16, !_15])))] yields

Game 5 is
! !_15 <= N
in(c_in[!_15], payload: bounded_1000_payload);
new keyseed: bounded_1000_mkeyseed;
out(c_out[!_15], ());
! !_16 <= N
(
  in(c_in[!_16, !_15], (argv0_22: bitstring, argv1_21: bitstring, argv2_20: bitstring, argv3_19: bitstring, argv4_18: bitstring));
  out(c_out[!_16, !_15], ());
  in(c_in[!_16, !_15], ());
  event client_send(payload);
  let Conc1_188_0: bitstring = conc1(payload) in
  let @2_x_36: bitstring = Conc1_188_0 in
  let HMAC_192_0: fixed_20_hash = @2_mac2(@2_x_36, @2_mkgen2(keyseed)) in
  let Conc2_196_0: bitstring = conc2(payload, HMAC_192_0) in
  out(c_out[!_16, !_15], Conc2_196_0)
) | (
  ! !_17 <= N
  in(c_in[!_17, !_16, !_15], (argv0_27: bitstring, argv1_26: bitstring, argv2_25: bitstring, argv3_24: bitstring, argv4_23: bitstring));
  out(c_out[!_17, !_16, !_15], ());
  in(c_in[!_17, !_16, !_15], a_113_0: bitstring);
  let Pars1_236_0: bounded_1000_payload = pars1(a_113_0) in
  let Conc1_259_0: bitstring = conc1(Pars1_236_0) in
  let Pars2_274_0: fixed_20_hash = pars2(a_113_0) in
  find @i_37 <= N suchthat defined(@2_x_36[@i_37]) && ((Conc1_259_0 = @2_x_36[@i_37]) && @2_check2(@2_x_36[@i_37], @2_mkgen2(keyseed), Pars2_274_0)) then
  (
    if true then
    event server_recv(Pars1_236_0)
  )
  else
    if false then
    event server_recv(Pars1_236_0)
)


Applying simplify yields

Game 6 is
! !_15 <= N
in(c_in[!_15], payload: bounded_1000_payload);
new keyseed: bounded_1000_mkeyseed;
out(c_out[!_15], ());
! !_16 <= N
(
  in(c_in[!_16, !_15], (argv0_22: bitstring, argv1_21: bitstring, argv2_20: bitstring, argv3_19: bitstring, argv4_18: bitstring));
  out(c_out[!_16, !_15], ());
  in(c_in[!_16, !_15], ());
  event client_send(payload);
  let Conc1_188_0: bitstring = conc1(payload) in
  let @2_x_36: bitstring = Conc1_188_0 in
  let HMAC_192_0: fixed_20_hash = @2_mac2(@2_x_36, @2_mkgen2(keyseed)) in
  let Conc2_196_0: bitstring = conc2(payload, HMAC_192_0) in
  out(c_out[!_16, !_15], Conc2_196_0)
) | (
  ! !_17 <= N
  in(c_in[!_17, !_16, !_15], (argv0_27: bitstring, argv1_26: bitstring, argv2_25: bitstring, argv3_24: bitstring, argv4_23: bitstring));
  out(c_out[!_17, !_16, !_15], ());
  in(c_in[!_17, !_16, !_15], a_113_0: bitstring);
  let Pars1_236_0: bounded_1000_payload = pars1(a_113_0) in
  let Conc1_259_0: bitstring = conc1(Pars1_236_0) in
  let Pars2_274_0: fixed_20_hash = pars2(a_113_0) in
  find @i_37 <= N suchthat defined(@2_x_36[@i_37]) && ((Pars1_236_0 = payload) && @2_check2(@2_x_36[@i_37], @2_mkgen2(keyseed), Pars2_274_0)) then
  event server_recv(Pars1_236_0)
)


Applying remove assignments of useless yields

Game 7 is
! !_15 <= N
in(c_in[!_15], payload: bounded_1000_payload);
new keyseed: bounded_1000_mkeyseed;
out(c_out[!_15], ());
! !_16 <= N
(
  in(c_in[!_16, !_15], (argv0_22: bitstring, argv1_21: bitstring, argv2_20: bitstring, argv3_19: bitstring, argv4_18: bitstring));
  out(c_out[!_16, !_15], ());
  in(c_in[!_16, !_15], ());
  event client_send(payload);
  let Conc1_188_0: bitstring = conc1(payload) in
  let HMAC_192_0: fixed_20_hash = @2_mac2(Conc1_188_0, @2_mkgen2(keyseed)) in
  let Conc2_196_0: bitstring = conc2(payload, HMAC_192_0) in
  out(c_out[!_16, !_15], Conc2_196_0)
) | (
  ! !_17 <= N
  in(c_in[!_17, !_16, !_15], (argv0_27: bitstring, argv1_26: bitstring, argv2_25: bitstring, argv3_24: bitstring, argv4_23: bitstring));
  out(c_out[!_17, !_16, !_15], ());
  in(c_in[!_17, !_16, !_15], a_113_0: bitstring);
  let Pars1_236_0: bounded_1000_payload = pars1(a_113_0) in
  let Pars2_274_0: fixed_20_hash = pars2(a_113_0) in
  find @i_37 <= N suchthat defined(Conc1_188_0[@i_37], Conc1_188_0[@i_37]) && ((Pars1_236_0 = payload) && @2_check2(Conc1_188_0[@i_37], @2_mkgen2(keyseed), Pars2_274_0)) then
  event server_recv(Pars1_236_0)
)


RESULT Proved event server_recv(x) ==> client_send(x) up to probability N * Pmac(time(context for game 4) + time + (-1. * N * N + N * N * N) * time(HMAC_sha1_check, maxlength(game 4: Conc1_259_0[!_17, !_16, !_15])) + (-1. * N + N * N) * time(HMAC_sha1, maxlength(game 4: Conc1_188_0[!_16, !_15])) + (-1. + N) * time(mkgen), N, N * N, max(maxlength(game 4: Conc1_259_0[!_17, !_16, !_15]), maxlength(game 4: Conc1_188_0[!_16, !_15])))
RESULT time(context for game 4) = (N * N + N * N * N) * time(conc1) + N * N * time(conc2) + N * N * N * time(pars2, maxlength(game 4: a_113_0[!_17, !_16, !_15])) + N * N * N * time(pars1, maxlength(game 4: a_113_0[!_17, !_16, !_15]))
All queries proved.

