
Doing expand if, let, find... No change.
Doing simplify... Run simplify 2 time(s). Fixpoint reached.
Done.
Doing move all binders... No change.
Doing remove assignments of useless... Done.
Trying equivalence
equiv ! !_17 <= @3_N3 new @3_r: fixed_100_mkeyseed; (
  ! !_18 <= @3_N @3_Omac(@3_x: bitstring) := HMAC_sha1(@3_x, mkgen(@3_r)),
  ! !_19 <= @3_N2 @3_Ocheck(@3_m: bitstring, @3_ma: bitstring) := HMAC_sha1_check(@3_m, mkgen(@3_r), @3_ma))
<=(@3_N3 * Pmac(time + (@3_N3 - 1.) * (time(mkgen) + @3_N * time(HMAC_sha1, maxlength(@3_x[!_18, !_17])) + @3_N2 * time(HMAC_sha1_check, maxlength(@3_m[!_19, !_17]), maxlength(@3_ma[!_19, !_17]))), @3_N, @3_N2, max(maxlength(@3_x[!_18, !_17]), maxlength(@3_m[!_19, !_17]))))=> [computational]
      ! !_20 <= @3_N3 new @3_r: fixed_100_mkeyseed [unchanged]; (
  ! !_21 <= @3_N @3_Omac(@3_x_40: bitstring) := let @3_x: bitstring = @3_x_40 in @3_mac2(@3_x, @3_mkgen2(@3_r)),
  ! !_22 <= @3_N2 @3_Ocheck(@3_m: bitstring, @3_ma: bitstring) := find @3_j <= @3_N suchthat defined(@3_x[@3_j]) && ((@3_m = @3_x[@3_j]) && @3_check2(@3_x[@3_j], @3_mkgen2(@3_r), @3_ma)) then true else false)
... Failed.
Doing remove assignments of binder keyAB... Done.
Trying equivalence
equiv ! !_17 <= @3_N3 new @3_r: fixed_100_mkeyseed; (
  ! !_18 <= @3_N @3_Omac(@3_x: bitstring) := HMAC_sha1(@3_x, mkgen(@3_r)),
  ! !_19 <= @3_N2 @3_Ocheck(@3_m: bitstring, @3_ma: bitstring) := HMAC_sha1_check(@3_m, mkgen(@3_r), @3_ma))
<=(@3_N3 * Pmac(time + (@3_N3 - 1.) * (time(mkgen) + @3_N * time(HMAC_sha1, maxlength(@3_x[!_18, !_17])) + @3_N2 * time(HMAC_sha1_check, maxlength(@3_m[!_19, !_17]), maxlength(@3_ma[!_19, !_17]))), @3_N, @3_N2, max(maxlength(@3_x[!_18, !_17]), maxlength(@3_m[!_19, !_17]))))=> [computational]
      ! !_20 <= @3_N3 new @3_r: fixed_100_mkeyseed [unchanged]; (
  ! !_21 <= @3_N @3_Omac(@3_x_40: bitstring) := let @3_x: bitstring = @3_x_40 in @3_mac2(@3_x, @3_mkgen2(@3_r)),
  ! !_22 <= @3_N2 @3_Ocheck(@3_m: bitstring, @3_ma: bitstring) := find @3_j <= @3_N suchthat defined(@3_x[@3_j]) && ((@3_m = @3_x[@3_j]) && @3_check2(@3_x[@3_j], @3_mkgen2(@3_r), @3_ma)) then true else false)
with keyseed... Succeeded.
Doing simplify... Run simplify 2 time(s). Maximum reached.
Done.
Doing move all binders... No change.
Doing remove assignments of useless... Done.
Proved query event client_accept(x, y) ==> server_reply(x, y)
Proved query event server_reply(x, y) ==> client_begin(x)
===================== Proof starts =======================
Initial state
Game 1 is
! !_23 <= N
in(c_in[!_23], (request: bounded_2000_request, response: bounded_2000_response));
new keyseed: fixed_100_mkeyseed;
let keyAB: fixed_100_mkey = mkgen(keyseed) in
out(c_out[!_23], ());
(
  ! !_24 <= N
  in(c_in[!_24, !_23], (argv0_30: bitstring, argv1_29: bitstring, argv2_28: bitstring, argv3_27: bitstring, argv4_26: bitstring));
  out(c_out[!_24, !_23], ());
  in(c_in[!_24, !_23], ());
  event client_begin(request);
  let Conc1_213_0: bitstring = conc1(request) in
  let HMAC_217_0: bitstring = HMAC(arithmetic1, Conc1_213_0, keyAB) in
  let Conc2_221_0: bitstring = conc2(request, HMAC_217_0) in
  out(c_out[!_24, !_23], Conc2_221_0);
  in(c_in[!_24, !_23], a_347_0: bitstring);
  let Pars1_604_0: bounded_2000_response = pars1(a_347_0) in
  let Conc2_608_0: bitstring = conc3(request, Pars1_604_0) in
  let HMAC_612_0: bitstring = HMAC(arithmetic1, Conc2_608_0, keyAB) in
  let Pars2_736_0: bitstring = pars2(a_347_0) in
  if (HMAC_612_0 = Pars2_736_0) then
  event client_accept(request, Pars1_604_0)
) | (
  ! !_25 <= N
  in(c_in[!_25, !_23], (argv0_35: bitstring, argv1_34: bitstring, argv2_33: bitstring, argv3_32: bitstring, argv4_31: bitstring));
  out(c_out[!_25, !_23], ());
  in(c_in[!_25, !_23], a_96_0: bitstring);
  let Pars1_342_0: bounded_2000_request = pars3(a_96_0) in
  let Conc1_345_0: bitstring = conc1(Pars1_342_0) in
  let HMAC_349_0: bitstring = HMAC(arithmetic1, Conc1_345_0, keyAB) in
  let Pars2_352_0: bitstring = pars4(a_96_0) in
  if (HMAC_349_0 = Pars2_352_0) then
  event server_reply(Pars1_342_0, response);
  let Pars1_573_0: bounded_2000_request = pars3(a_96_0) in
  let Conc2_577_0: bitstring = conc3(Pars1_573_0, response) in
  let HMAC_581_0: bitstring = HMAC(arithmetic1, Conc2_577_0, keyAB) in
  let Conc2_585_0: bitstring = conc6(response, HMAC_581_0) in
  out(c_out[!_25, !_23], Conc2_585_0)
)


Applying simplify yields

Game 2 is
! !_23 <= N
in(c_in[!_23], (request: bounded_2000_request, response: bounded_2000_response));
new keyseed: fixed_100_mkeyseed;
let keyAB: fixed_100_mkey = mkgen(keyseed) in
out(c_out[!_23], ());
(
  ! !_24 <= N
  in(c_in[!_24, !_23], (argv0_30: bitstring, argv1_29: bitstring, argv2_28: bitstring, argv3_27: bitstring, argv4_26: bitstring));
  out(c_out[!_24, !_23], ());
  in(c_in[!_24, !_23], ());
  event client_begin(request);
  let Conc1_213_0: bitstring = conc1(request) in
  let HMAC_217_0: bitstring = HMAC_sha1(Conc1_213_0, keyAB) in
  let Conc2_221_0: bitstring = conc2(request, HMAC_217_0) in
  out(c_out[!_24, !_23], Conc2_221_0);
  in(c_in[!_24, !_23], a_347_0: bitstring);
  let Pars1_604_0: bounded_2000_response = pars1(a_347_0) in
  let Conc2_608_0: bitstring = conc3(request, Pars1_604_0) in
  let HMAC_612_0: bitstring = HMAC_sha1(Conc2_608_0, keyAB) in
  let Pars2_736_0: bitstring = pars2(a_347_0) in
  if HMAC_sha1_check(Conc2_608_0, keyAB, Pars2_736_0) then
  event client_accept(request, Pars1_604_0)
) | (
  ! !_25 <= N
  in(c_in[!_25, !_23], (argv0_35: bitstring, argv1_34: bitstring, argv2_33: bitstring, argv3_32: bitstring, argv4_31: bitstring));
  out(c_out[!_25, !_23], ());
  in(c_in[!_25, !_23], a_96_0: bitstring);
  let Pars1_342_0: bounded_2000_request = pars3(a_96_0) in
  let Conc1_345_0: bitstring = conc1(Pars1_342_0) in
  let HMAC_349_0: bitstring = HMAC_sha1(Conc1_345_0, keyAB) in
  let Pars2_352_0: bitstring = pars4(a_96_0) in
  if HMAC_sha1_check(Conc1_345_0, keyAB, Pars2_352_0) then
  event server_reply(Pars1_342_0, response);
  let Pars1_573_0: bounded_2000_request = pars3(a_96_0) in
  let Conc2_577_0: bitstring = conc3(Pars1_573_0, response) in
  let HMAC_581_0: bitstring = HMAC_sha1(Conc2_577_0, keyAB) in
  let Conc2_585_0: bitstring = conc6(response, HMAC_581_0) in
  out(c_out[!_25, !_23], Conc2_585_0)
)


Applying remove assignments of useless yields

Game 3 is
! !_23 <= N
in(c_in[!_23], (request: bounded_2000_request, response: bounded_2000_response));
new keyseed: fixed_100_mkeyseed;
let keyAB: fixed_100_mkey = mkgen(keyseed) in
out(c_out[!_23], ());
(
  ! !_24 <= N
  in(c_in[!_24, !_23], (argv0_30: bitstring, argv1_29: bitstring, argv2_28: bitstring, argv3_27: bitstring, argv4_26: bitstring));
  out(c_out[!_24, !_23], ());
  in(c_in[!_24, !_23], ());
  event client_begin(request);
  let Conc1_213_0: bitstring = conc1(request) in
  let HMAC_217_0: bitstring = HMAC_sha1(Conc1_213_0, keyAB) in
  let Conc2_221_0: bitstring = conc2(request, HMAC_217_0) in
  out(c_out[!_24, !_23], Conc2_221_0);
  in(c_in[!_24, !_23], a_347_0: bitstring);
  let Pars1_604_0: bounded_2000_response = pars1(a_347_0) in
  let Conc2_608_0: bitstring = conc3(request, Pars1_604_0) in
  let Pars2_736_0: bitstring = pars2(a_347_0) in
  if HMAC_sha1_check(Conc2_608_0, keyAB, Pars2_736_0) then
  event client_accept(request, Pars1_604_0)
) | (
  ! !_25 <= N
  in(c_in[!_25, !_23], (argv0_35: bitstring, argv1_34: bitstring, argv2_33: bitstring, argv3_32: bitstring, argv4_31: bitstring));
  out(c_out[!_25, !_23], ());
  in(c_in[!_25, !_23], a_96_0: bitstring);
  let Pars1_342_0: bounded_2000_request = pars3(a_96_0) in
  let Conc1_345_0: bitstring = conc1(Pars1_342_0) in
  let Pars2_352_0: bitstring = pars4(a_96_0) in
  if HMAC_sha1_check(Conc1_345_0, keyAB, Pars2_352_0) then
  event server_reply(Pars1_342_0, response);
  let Pars1_573_0: bounded_2000_request = pars3(a_96_0) in
  let Conc2_577_0: bitstring = conc3(Pars1_573_0, response) in
  let HMAC_581_0: bitstring = HMAC_sha1(Conc2_577_0, keyAB) in
  let Conc2_585_0: bitstring = conc6(response, HMAC_581_0) in
  out(c_out[!_25, !_23], Conc2_585_0)
)


Applying remove assignments of binder keyAB yields

Game 4 is
! !_23 <= N
in(c_in[!_23], (request: bounded_2000_request, response: bounded_2000_response));
new keyseed: fixed_100_mkeyseed;
out(c_out[!_23], ());
(
  ! !_24 <= N
  in(c_in[!_24, !_23], (argv0_30: bitstring, argv1_29: bitstring, argv2_28: bitstring, argv3_27: bitstring, argv4_26: bitstring));
  out(c_out[!_24, !_23], ());
  in(c_in[!_24, !_23], ());
  event client_begin(request);
  let Conc1_213_0: bitstring = conc1(request) in
  let HMAC_217_0: bitstring = HMAC_sha1(Conc1_213_0, mkgen(keyseed)) in
  let Conc2_221_0: bitstring = conc2(request, HMAC_217_0) in
  out(c_out[!_24, !_23], Conc2_221_0);
  in(c_in[!_24, !_23], a_347_0: bitstring);
  let Pars1_604_0: bounded_2000_response = pars1(a_347_0) in
  let Conc2_608_0: bitstring = conc3(request, Pars1_604_0) in
  let Pars2_736_0: bitstring = pars2(a_347_0) in
  if HMAC_sha1_check(Conc2_608_0, mkgen(keyseed), Pars2_736_0) then
  event client_accept(request, Pars1_604_0)
) | (
  ! !_25 <= N
  in(c_in[!_25, !_23], (argv0_35: bitstring, argv1_34: bitstring, argv2_33: bitstring, argv3_32: bitstring, argv4_31: bitstring));
  out(c_out[!_25, !_23], ());
  in(c_in[!_25, !_23], a_96_0: bitstring);
  let Pars1_342_0: bounded_2000_request = pars3(a_96_0) in
  let Conc1_345_0: bitstring = conc1(Pars1_342_0) in
  let Pars2_352_0: bitstring = pars4(a_96_0) in
  if HMAC_sha1_check(Conc1_345_0, mkgen(keyseed), Pars2_352_0) then
  event server_reply(Pars1_342_0, response);
  let Pars1_573_0: bounded_2000_request = pars3(a_96_0) in
  let Conc2_577_0: bitstring = conc3(Pars1_573_0, response) in
  let HMAC_581_0: bitstring = HMAC_sha1(Conc2_577_0, mkgen(keyseed)) in
  let Conc2_585_0: bitstring = conc6(response, HMAC_581_0) in
  out(c_out[!_25, !_23], Conc2_585_0)
)


Applying equivalence
equiv ! !_17 <= @3_N3 new @3_r: fixed_100_mkeyseed; (
  ! !_18 <= @3_N @3_Omac(@3_x: bitstring) := HMAC_sha1(@3_x, mkgen(@3_r)),
  ! !_19 <= @3_N2 @3_Ocheck(@3_m: bitstring, @3_ma: bitstring) := HMAC_sha1_check(@3_m, mkgen(@3_r), @3_ma))
<=(@3_N3 * Pmac(time + (@3_N3 - 1.) * (time(mkgen) + @3_N * time(HMAC_sha1, maxlength(@3_x[!_18, !_17])) + @3_N2 * time(HMAC_sha1_check, maxlength(@3_m[!_19, !_17]), maxlength(@3_ma[!_19, !_17]))), @3_N, @3_N2, max(maxlength(@3_x[!_18, !_17]), maxlength(@3_m[!_19, !_17]))))=> [computational]
      ! !_20 <= @3_N3 new @3_r: fixed_100_mkeyseed [unchanged]; (
  ! !_21 <= @3_N @3_Omac(@3_x_40: bitstring) := let @3_x: bitstring = @3_x_40 in @3_mac2(@3_x, @3_mkgen2(@3_r)),
  ! !_22 <= @3_N2 @3_Ocheck(@3_m: bitstring, @3_ma: bitstring) := find @3_j <= @3_N suchthat defined(@3_x[@3_j]) && ((@3_m = @3_x[@3_j]) && @3_check2(@3_x[@3_j], @3_mkgen2(@3_r), @3_ma)) then true else false)
with keyseed [probability N * Pmac(time(context for game 4) + time + (-2. * N + 2. * N * N) * time(HMAC_sha1_check, max(maxlength(game 4: Conc1_345_0[!_25, !_23]), maxlength(game 4: Conc2_608_0[!_24, !_23])), max(maxlength(game 4: Pars2_352_0[!_25, !_23]), maxlength(game 4: Pars2_736_0[!_24, !_23]))) + (-2. * N + 2. * N * N) * time(HMAC_sha1, max(maxlength(game 4: Conc2_577_0[!_25, !_23]), maxlength(game 4: Conc1_213_0[!_24, !_23]))) + (-1. + N) * time(mkgen), 2. * N, 2. * N, max(maxlength(game 4: Conc2_608_0[!_24, !_23]), maxlength(game 4: Conc1_345_0[!_25, !_23]), maxlength(game 4: Conc1_213_0[!_24, !_23]), maxlength(game 4: Conc2_577_0[!_25, !_23])))] yields

Game 5 is
! !_23 <= N
in(c_in[!_23], (request: bounded_2000_request, response: bounded_2000_response));
new keyseed: fixed_100_mkeyseed;
out(c_out[!_23], ());
(
  ! !_24 <= N
  in(c_in[!_24, !_23], (argv0_30: bitstring, argv1_29: bitstring, argv2_28: bitstring, argv3_27: bitstring, argv4_26: bitstring));
  out(c_out[!_24, !_23], ());
  in(c_in[!_24, !_23], ());
  event client_begin(request);
  let Conc1_213_0: bitstring = conc1(request) in
  let @3_x_52: bitstring = Conc1_213_0 in
  let HMAC_217_0: bitstring = @3_mac2(@3_x_52, @3_mkgen2(keyseed)) in
  let Conc2_221_0: bitstring = conc2(request, HMAC_217_0) in
  out(c_out[!_24, !_23], Conc2_221_0);
  in(c_in[!_24, !_23], a_347_0: bitstring);
  let Pars1_604_0: bounded_2000_response = pars1(a_347_0) in
  let Conc2_608_0: bitstring = conc3(request, Pars1_604_0) in
  let Pars2_736_0: bitstring = pars2(a_347_0) in
  find @i_67 <= N suchthat defined(@3_x_51[@i_67]) && ((Conc2_608_0 = @3_x_51[@i_67]) && @3_check2(@3_x_51[@i_67], @3_mkgen2(keyseed), Pars2_736_0)) then
  (
    if true then
    event client_accept(request, Pars1_604_0)
  )
  orfind @i_61 <= N suchthat defined(@3_x_52[@i_61]) && ((Conc2_608_0 = @3_x_52[@i_61]) && @3_check2(@3_x_52[@i_61], @3_mkgen2(keyseed), Pars2_736_0)) then
  (
    if true then
    event client_accept(request, Pars1_604_0)
  )
  else
    if false then
    event client_accept(request, Pars1_604_0)
) | (
  ! !_25 <= N
  in(c_in[!_25, !_23], (argv0_35: bitstring, argv1_34: bitstring, argv2_33: bitstring, argv3_32: bitstring, argv4_31: bitstring));
  out(c_out[!_25, !_23], ());
  in(c_in[!_25, !_23], a_96_0: bitstring);
  let Pars1_342_0: bounded_2000_request = pars3(a_96_0) in
  let Conc1_345_0: bitstring = conc1(Pars1_342_0) in
  let Pars2_352_0: bitstring = pars4(a_96_0) in
  find @i_59 <= N suchthat defined(@3_x_51[@i_59]) && ((Conc1_345_0 = @3_x_51[@i_59]) && @3_check2(@3_x_51[@i_59], @3_mkgen2(keyseed), Pars2_352_0)) then
  (
    if true then
    event server_reply(Pars1_342_0, response);
    let Pars1_573_0: bounded_2000_request = pars3(a_96_0) in
    let Conc2_577_0: bitstring = conc3(Pars1_573_0, response) in
    let @3_x_51: bitstring = Conc2_577_0 in
    let HMAC_581_0: bitstring = @3_mac2(@3_x_51, @3_mkgen2(keyseed)) in
    let Conc2_585_0: bitstring = conc6(response, HMAC_581_0) in
    out(c_out[!_25, !_23], Conc2_585_0)
  )
  orfind @i_53 <= N suchthat defined(@3_x_52[@i_53]) && ((Conc1_345_0 = @3_x_52[@i_53]) && @3_check2(@3_x_52[@i_53], @3_mkgen2(keyseed), Pars2_352_0)) then
  (
    if true then
    event server_reply(Pars1_342_0, response);
    let Pars1_573_0: bounded_2000_request = pars3(a_96_0) in
    let Conc2_577_0: bitstring = conc3(Pars1_573_0, response) in
    let @3_x_51: bitstring = Conc2_577_0 in
    let HMAC_581_0: bitstring = @3_mac2(@3_x_51, @3_mkgen2(keyseed)) in
    let Conc2_585_0: bitstring = conc6(response, HMAC_581_0) in
    out(c_out[!_25, !_23], Conc2_585_0)
  )
  else
    if false then
    event server_reply(Pars1_342_0, response);
    let Pars1_573_0: bounded_2000_request = pars3(a_96_0) in
    let Conc2_577_0: bitstring = conc3(Pars1_573_0, response) in
    let @3_x_51: bitstring = Conc2_577_0 in
    let HMAC_581_0: bitstring = @3_mac2(@3_x_51, @3_mkgen2(keyseed)) in
    let Conc2_585_0: bitstring = conc6(response, HMAC_581_0) in
    out(c_out[!_25, !_23], Conc2_585_0)
)


Applying simplify yields

Game 6 is
! !_23 <= N
in(c_in[!_23], (request: bounded_2000_request, response: bounded_2000_response));
new keyseed: fixed_100_mkeyseed;
out(c_out[!_23], ());
(
  ! !_24 <= N
  in(c_in[!_24, !_23], (argv0_30: bitstring, argv1_29: bitstring, argv2_28: bitstring, argv3_27: bitstring, argv4_26: bitstring));
  out(c_out[!_24, !_23], ());
  in(c_in[!_24, !_23], ());
  event client_begin(request);
  let Conc1_213_0: bitstring = conc1(request) in
  let @3_x_52: bitstring = Conc1_213_0 in
  let HMAC_217_0: bitstring = @3_mac2(@3_x_52, @3_mkgen2(keyseed)) in
  let Conc2_221_0: bitstring = conc2(request, HMAC_217_0) in
  out(c_out[!_24, !_23], Conc2_221_0);
  in(c_in[!_24, !_23], a_347_0: bitstring);
  let Pars1_604_0: bounded_2000_response = pars1(a_347_0) in
  let Conc2_608_0: bitstring = conc3(request, Pars1_604_0) in
  let Pars2_736_0: bitstring = pars2(a_347_0) in
  find @i_67 <= N suchthat defined(@3_x_51[@i_67]) && ((Pars1_604_0 = response) && @3_check2(@3_x_51[@i_67], @3_mkgen2(keyseed), Pars2_736_0)) then
  event client_accept(request, Pars1_604_0)
) | (
  ! !_25 <= N
  in(c_in[!_25, !_23], (argv0_35: bitstring, argv1_34: bitstring, argv2_33: bitstring, argv3_32: bitstring, argv4_31: bitstring));
  out(c_out[!_25, !_23], ());
  in(c_in[!_25, !_23], a_96_0: bitstring);
  let Pars1_342_0: bounded_2000_request = pars3(a_96_0) in
  let Conc1_345_0: bitstring = conc1(Pars1_342_0) in
  let Pars2_352_0: bitstring = pars4(a_96_0) in
  find @i_53 <= N suchthat defined(@3_x_52[@i_53]) && ((Pars1_342_0 = request) && @3_check2(@3_x_52[@i_53], @3_mkgen2(keyseed), Pars2_352_0)) then
  event server_reply(Pars1_342_0, response);
  let Pars1_573_0: bounded_2000_request = pars3(a_96_0) in
  let Conc2_577_0: bitstring = conc3(Pars1_573_0, response) in
  let @3_x_51: bitstring = Conc2_577_0 in
  let HMAC_581_0: bitstring = @3_mac2(@3_x_51, @3_mkgen2(keyseed)) in
  let Conc2_585_0: bitstring = conc6(response, HMAC_581_0) in
  out(c_out[!_25, !_23], Conc2_585_0)
)


Applying remove assignments of useless yields

Game 7 is
! !_23 <= N
in(c_in[!_23], (request: bounded_2000_request, response: bounded_2000_response));
new keyseed: fixed_100_mkeyseed;
out(c_out[!_23], ());
(
  ! !_24 <= N
  in(c_in[!_24, !_23], (argv0_30: bitstring, argv1_29: bitstring, argv2_28: bitstring, argv3_27: bitstring, argv4_26: bitstring));
  out(c_out[!_24, !_23], ());
  in(c_in[!_24, !_23], ());
  event client_begin(request);
  let Conc1_213_0: bitstring = conc1(request) in
  let HMAC_217_0: bitstring = @3_mac2(Conc1_213_0, @3_mkgen2(keyseed)) in
  let Conc2_221_0: bitstring = conc2(request, HMAC_217_0) in
  out(c_out[!_24, !_23], Conc2_221_0);
  in(c_in[!_24, !_23], a_347_0: bitstring);
  let Pars1_604_0: bounded_2000_response = pars1(a_347_0) in
  let Pars2_736_0: bitstring = pars2(a_347_0) in
  find @i_67 <= N suchthat defined(Conc2_577_0[@i_67], Pars1_573_0[@i_67]) && ((Pars1_604_0 = response) && @3_check2(Conc2_577_0[@i_67], @3_mkgen2(keyseed), Pars2_736_0)) then
  event client_accept(request, Pars1_604_0)
) | (
  ! !_25 <= N
  in(c_in[!_25, !_23], (argv0_35: bitstring, argv1_34: bitstring, argv2_33: bitstring, argv3_32: bitstring, argv4_31: bitstring));
  out(c_out[!_25, !_23], ());
  in(c_in[!_25, !_23], a_96_0: bitstring);
  let Pars1_342_0: bounded_2000_request = pars3(a_96_0) in
  let Pars2_352_0: bitstring = pars4(a_96_0) in
  find @i_53 <= N suchthat defined(Conc1_213_0[@i_53], Conc1_213_0[@i_53]) && ((Pars1_342_0 = request) && @3_check2(Conc1_213_0[@i_53], @3_mkgen2(keyseed), Pars2_352_0)) then
  event server_reply(Pars1_342_0, response);
  let Pars1_573_0: bounded_2000_request = pars3(a_96_0) in
  let Conc2_577_0: bitstring = conc3(Pars1_573_0, response) in
  let HMAC_581_0: bitstring = @3_mac2(Conc2_577_0, @3_mkgen2(keyseed)) in
  let Conc2_585_0: bitstring = conc6(response, HMAC_581_0) in
  out(c_out[!_25, !_23], Conc2_585_0)
)


RESULT Proved event server_reply(x, y) ==> client_begin(x) up to probability N * Pmac(time(context for game 4) + time + (-2. * N + 2. * N * N) * time(HMAC_sha1_check, max(maxlength(game 4: Conc1_345_0[!_25, !_23]), maxlength(game 4: Conc2_608_0[!_24, !_23])), max(maxlength(game 4: Pars2_352_0[!_25, !_23]), maxlength(game 4: Pars2_736_0[!_24, !_23]))) + (-2. * N + 2. * N * N) * time(HMAC_sha1, max(maxlength(game 4: Conc2_577_0[!_25, !_23]), maxlength(game 4: Conc1_213_0[!_24, !_23]))) + (-1. + N) * time(mkgen), 2. * N, 2. * N, max(maxlength(game 4: Conc2_608_0[!_24, !_23]), maxlength(game 4: Conc1_345_0[!_25, !_23]), maxlength(game 4: Conc1_213_0[!_24, !_23]), maxlength(game 4: Conc2_577_0[!_25, !_23])))
RESULT Proved event client_accept(x, y) ==> server_reply(x, y) up to probability N * Pmac(time(context for game 4) + time + (-2. * N + 2. * N * N) * time(HMAC_sha1_check, max(maxlength(game 4: Conc1_345_0[!_25, !_23]), maxlength(game 4: Conc2_608_0[!_24, !_23])), max(maxlength(game 4: Pars2_352_0[!_25, !_23]), maxlength(game 4: Pars2_736_0[!_24, !_23]))) + (-2. * N + 2. * N * N) * time(HMAC_sha1, max(maxlength(game 4: Conc2_577_0[!_25, !_23]), maxlength(game 4: Conc1_213_0[!_24, !_23]))) + (-1. + N) * time(mkgen), 2. * N, 2. * N, max(maxlength(game 4: Conc2_608_0[!_24, !_23]), maxlength(game 4: Conc1_345_0[!_25, !_23]), maxlength(game 4: Conc1_213_0[!_24, !_23]), maxlength(game 4: Conc2_577_0[!_25, !_23])))
RESULT time(context for game 4) = N * N * time(conc1, maxlength(game 4: Pars1_342_0[!_25, !_23])) + N * N * time(pars4, maxlength(game 4: a_96_0[!_25, !_23])) + 2. * N * N * time(pars3, maxlength(game 4: a_96_0[!_25, !_23])) + N * N * time(conc3, maxlength(game 4: Pars1_573_0[!_25, !_23]), maxlength(game 4: response[!_23])) + N * N * time(conc6, maxlength(game 4: response[!_23]), maxlength(game 4: HMAC_581_0[!_25, !_23])) + N * N * time(conc1, maxlength(game 4: request[!_23])) + N * N * time(conc2, maxlength(game 4: request[!_23]), maxlength(game 4: HMAC_217_0[!_24, !_23])) + N * N * time(pars1, maxlength(game 4: a_347_0[!_24, !_23])) + N * N * time(conc3, maxlength(game 4: request[!_23]), maxlength(game 4: Pars1_604_0[!_24, !_23])) + N * N * time(pars2, maxlength(game 4: a_347_0[!_24, !_23]))
All queries proved.
