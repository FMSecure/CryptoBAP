
(**********************************
  Tinyssh protocol.
***********************************)
param N,N'.
channel c_in, c_out.
type pad_rand [fixed]. (*size 255 bytes or less depending on how the padding is done*)
type cookie [fixed, large]. (* 16 bytes *)
type tag [bounded]. (* 1 byte *)
type uint32 [bounded]. (* 4 bytes *)
type D [fixed].
type hashkey [bounded].
type hash [fixed, large].
type signature [bounded].
type block [fixed].
type skeyseed [large, fixed].
type sskey [bounded, large].
type spkey [bounded, large].
type mkey [bounded, large].
type macinput [bounded].
type macres [large].
type iv [fixed, large].
type symkey [fixed, large].


fun skp(spkey,sskey): bitstring [data].

type Z [large, bounded]. (*mpint = ssh string (size+string payload). MSB. 8 bits per byte. where 0=empty string, >0=first bit=0, <0=first bit=1,at beginning no useless 00 or FF. *)
type G [large, bounded]. (*mpint*)

fun conc(bitstring, bitstring): bitstring.

fun pars1(bitstring): bitstring.

fun pars2(bitstring): bitstring.

equation forall x: bitstring, y: bitstring;
  pars1(conc(x,y)) = x.

equation forall x: bitstring, y: bitstring;
  pars2(conc(x,y)) = y.

const c_50: bitstring.
const c_256: bitstring.
const c_128: bitstring.
const c_0: bitstring. 

fun bitstring_of_G(G): bitstring [data].

fun padr(bitstring,pad_rand): bitstring.
letfun pad(m:bitstring) = r <-R pad_rand; padr(m, r).
fun unpad(bitstring): bitstringbot.

fun injbot(bitstring): bitstringbot [data].
equation forall x: bitstring; injbot (x) <> bottom.
equation forall x: bitstring, r: pad_rand;
       unpad(padr(x, r)) = injbot(x).

(* utils *)

fun get_size(bitstring): uint32.

fun concatm(tag, bitstring): bitstring [data].
fun concatKEXINIT(cookie, bitstring): bitstring [data].
fun concat8(bitstring, bitstring, bitstring, bitstring, spkey, G, G, G): bitstring [data].
fun concatKEXDHREPLY(spkey, G, signature): bitstring [data].
fun concat(bitstring, bitstring): bitstring.
fun concatnm(uint32, bitstring): bitstring [data].
fun concatem(bitstring, macres): bitstring [data].
fun check_algorithms(bitstring): bool.
fun block_of_hash(hash): block [data].

const negotiation_string: bitstring.
const tag_kexdh_init: tag.
const tag_kexdh_reply: tag.
const tag_kex_init: tag.
const tag_newkeys: tag.
const uint32_zero: uint32.
const null_string: bitstring. (*the string of length 0 *)

(*CDH*)

expand DH_basic(G, Z, g, exp, exp', mult).

proba pCDH.
expand CDH(G, Z, g, exp, exp', mult, pCDH).

letfun message(x: Z) = exp(g, x).

(*MAC*)

fun mac(G, G, mkey): macres.
fun check_mac(G, G, mkey, macres): bool.

equation forall m: G, m1: G, k: mkey;
	check_mac(m, m1, k, mac(m, m1, k)).

(* symmetric encryption *)

fun enc(bitstring, symkey): bitstring.
fun dec(bitstring, symkey): bitstringbot.

equation forall m: bitstring, k: symkey;
    dec(enc(m, k), k) = injbot (m).

(*hash function *)

param qH [noninteractive].
proba Phash.

expand CollisionResistant_hash(hashkey, bitstring, hash, h, hashoracle, Phash).


(* signature *)

proba Psign.
proba Psigncoll.

expand UF_CMA_proba_signature(skeyseed, spkey, sskey, block, signature, sskgen, spkgen, sign, check, Psign, Psigncoll).

letfun kgen_s () = r <-R skeyseed; skp(spkgen(r), sskgen(r)).

(* utils *)

const tag_IVC: tag.
const tag_IVS: tag.
const tag_EKC: tag.
const tag_EKS: tag.
const tag_MKC: tag.
const tag_MKS: tag.

fun iv_of_hash (hash): iv.
fun symkey_of_hash (hash): symkey.
fun mkey_of_hash (hash): mkey.

fun concat4(G, hash, tag, hash): bitstring [data].
letfun gen(hk:hashkey, k:G, h1:hash, c:tag, h2:hash) = h(hk, concat4(k, h1, c, h2)).
letfun genIVC(hk:hashkey, k:G, h1:hash, h2:hash) = iv_of_hash(gen(hk, k, h1, tag_IVC, h2)).
letfun genIVS(hk:hashkey, k:G, h1:hash, h2:hash) = iv_of_hash(gen(hk, k, h1, tag_IVS, h2)).
letfun genEKC(hk:hashkey, k:G, h1:hash, h2:hash) = symkey_of_hash(gen(hk, k, h1, tag_EKC, h2)).
letfun genEKS(hk:hashkey, k:G, h1:hash, h2:hash) = symkey_of_hash(gen(hk, k, h1, tag_EKS, h2)).
letfun genMKC(hk:hashkey, k:G, h1:hash, h2:hash) = mkey_of_hash(gen(hk, k, h1, tag_MKC, h2)).
letfun genMKS(hk:hashkey, k:G, h1:hash, h2:hash) = mkey_of_hash(gen(hk, k, h1, tag_MKS, h2)).

equation forall k: G, h1: hash, c: tag, h2: hash, x1: bitstring, x2: bitstring, x3: bitstring, x4: bitstring, x5: spkey, x6: G, x7: G, x8: G;
   concat4(k, h1, c, h2) <> concat8(x1, x2, x3, x4, x5, x6, x7, x8).

(* key table *)

table trusted_hosts(spkey).

fun kdfPtoS(G, macres): symkey.
fun kdfStoP(G, macres): symkey.
fun to_sig(bitstring):signature.
fun from_sig(signature):bitstring.
fun trans(bitstring):spkey.
fun from_bot_to_sig(bitstringbot):signature.
const bl: block.
const user_auth: bitstring.
fun to_bot(bitstring):bitstringbot.
fun from_bot(bitstringbot):bitstring.
const user_answer: block.
const inputs: block.
(********************************
  <Query>
*********************************)
(* Authentication of the client to the server *)

event AcceptS(spkey, spkey).
event AcceptP(spkey, spkey).
event AcceptS2(spkey, spkey).
event AcceptP2(spkey, spkey).

event bad().

query i: spkey, j: spkey, l: spkey;
   event(AcceptP(i, j)) ==> event(AcceptS(i, l)).

query i: spkey, j: spkey;
   event(AcceptS2(i, j)) ==> event(AcceptP2(i, j)).

query i: spkey, j: spkey;
   event(AcceptP(i, j)) ==> true.

query i: spkey, j: spkey;
   event(AcceptS2(i, j)) ==> true.

query i: spkey, l: spkey;
   event(AcceptS(i, l)) ==> true.

query i: spkey, j: spkey;
   event(AcceptP2(i, j)) ==> true.

(*************************** 
  Model 
***************************)

let client(hk: mkey, pkS: spkey, pkP: spkey, skP: sskey) = 
in(c_in, ());
new a: Z;
let gA = exp(g,a) in
out(c_out, gA);
in(c_in, (B: G, sig: bitstring, opks: bitstring));
let sig1 = to_sig(sig) in
let opkst = trans(opks) in
if pkS = opkst then 
let h = mac(gA,B,hk) in
let k = exp(B,a) in
let x = check(bl,pkS,sig1) in
if x = true then 
event AcceptP(pkS, pkP);
let kPS = kdfPtoS(k,h) in
let kSP = kdfStoP(k,h) in
out(c_out, enc(user_auth,kPS));
in(c_in, userauth_answer: bitstring);
let user_auth1 = to_bot(user_auth) in
if dec(userauth_answer,kSP) = user_auth1 then 
event AcceptP2(pkS, pkP);
let y = conc(c_50,c_128) in
out(c_out, y);
in(c_in, ());
let sig2 = sign(user_answer,skP) in
let sig3 = from_sig(sig2) in
out(c_out, enc(sig3,kPS)); 0 .

let server(hk: mkey, pkP: spkey, pkS: spkey, skS: sskey) =
! N (
in(c_in, a_63: bitstring);
if c_0 = a_63 then 
event bad()
) | ! N (
in(c_in, a_429: G);
new SKey_661: Z;
let sk_663 = exp(g,SKey_661) in
let kAB_665 = exp(a_429,SKey_661) in
let HMAC_671 = mac(a_429,sk_663,hk) in
event AcceptS(pkS, pkP);
let signature_677 = sign(inputs,skS) in
let kPS_681 = kdfPtoS(kAB_665,HMAC_671) in
let kSP_685 = kdfStoP(kAB_665,HMAC_671) in
out(c_out, (pkS, sign(inputs,skS), sk_663));
in(c_in, a_689: bitstring);
let Dec_690 = dec(a_689,kPS_681) in
let dec1 = from_bot(Dec_690) in
let Enc_693 = enc(dec1,kSP_685) in
out(c_out, Enc_693);
! N (
in(c_in, a_5173: bitstring);
if c_0 = a_5173 then 
event bad();
let Pars1_5177 = pars1(a_5173) in
if c_50 = Pars1_5177 then 
event bad();
let Pars2_5183 = pars2(a_5173) in
if c_256 = Pars2_5183 then 
event bad()
) | ! N (
in(c_in, a_6160: bitstring);
let Dec_6161 = dec(a_6160,kPS_681) in
let sig4 = from_bot_to_sig(Dec_6161) in
let Ver_972 = check(bl,pkP,sig4) in
if Ver_972 = true then 
event AcceptS2(pkS, pkP);
yield)) .

(********************************
  <Environment>
*********************************)

process 
! N(
	in(c_in, ());
	new hk : mkey;
	new S_seed : skeyseed;
	let skS = sskgen(S_seed) in
	let pkS = spkgen(S_seed) in  
	out(c_out, pkS);
	! N (
		in(c_in, ());
		new P_seed : skeyseed;
		let skP = sskgen(P_seed) in
		let pkP = spkgen(P_seed) in	 
		out(c_out, pkP);
		(! N client(hk, pkS, pkP, skP)) | (! N server(hk, pkP, pkS, skS))
  )
)

