new a fixed_64
let gA = kgen(g,a) in
out c_out, gA
in c_in, B
in c_in, sig
in c_in, opks
let sig1 = to_sig(sig) in
let opkst = trans(opks) in
if pkS = opkst then
let h = HMAC(gA,B,pkS) in
let k = kgen(B,a) in
let x = verify(sig1,pkS) in
if x = true then
event AcceptP pkS pkP
let kPS = kdfPtoS(k,h) in
let kSP = kdfStoP(k,h) in
out c_out, enc(user_auth,kPS)
in c_in, userauth_answer
let userauth_answer1 = to_cipher(userauth_answer) in
if dec(userauth_answer1,kSP) = user_auth then
event AcceptP2 pkS pkP
let y = conc(c_50,c_128) in
out c_out, y
out c_out, enc(sign(user_answer,skP),kPS)
