/proverif -graph graph -in pi tinyssh.pi
Linear part:
kgen(kgen(g(),a),b) = kgen(kgen(g(),b),a)
Completing equations...
Completed equations:
kgen(kgen(g(),a),b) = kgen(kgen(g(),b),a)
Convergent part: No equation.
Process 0 (that is, the initial process):
{1}!
{2}new skS;
{3}let pkS = pk(skS) in
{4}out(c_out, pkS);
{5}!
{6}new skP;
{7}let pkP = pk(skP) in
{8}out(c_out, pkP);
(
    {9}!
    {10}new a;
    {11}let gA = kgen(g(),a) in
    {12}out(c_out, gA);
    {13}in(c_in, B);
    {14}in(c_in, sig);
    {15}in(c_in, opks);
    {16}if (pkS = opks) then
    {17}let h_1 = hash3(gA,B,pkS) in
    {18}let k_1 = kgen(B,a) in
    {19}let x = verify(sig,pkS) in
    {20}if (x = true()) then
    {21}event AcceptP(pkS,pkP);
    {22}let kPS_1 = kdfPtoS(k_1,h_1) in
    {23}let kSP_1 = kdfStoP(k_1,h_1) in
    {24}out(c_out, enc(user_auth(),kPS_1));
    {25}in(c_in, userauth_answer);
    {26}if (dec(userauth_answer,kSP_1) = user_auth()) then
    {27}event AcceptP2(pkS,pkP);
    {28}let y = conc(c_50(),c_128()) in
    {29}out(c_out, y);
    {30}out(c_out, enc(sign(user_answer(),skP),kPS_1))
) | (
    {31}!
    (
        {32}!
        {33}in(c_in, a_63);
        {34}if (c_0() = a_63) then
        {35}event bad()
    ) | (
        {36}!
        {37}in(c_in, a_429);
        {38}new SKey_661;
        {39}let sk_663 = kgen(g(),SKey_661) in
        {40}out(c_out, sk_663);
        {41}let kAB_665 = kgen(a_429,SKey_661) in
        {42}let HMAC_671 = hash3(a_429,sk_663,pkS) in
        {43}event AcceptS(pkS,pkP);
        {44}let signature_677 = sign(inputs(),skS) in
        {45}out(c_out, sign(inputs(),skS));
        {46}out(c_out, pkS);
        {47}let kPS_681 = kdfPtoS(kAB_665,HMAC_671) in
        {48}let kSP_685 = kdfStoP(kAB_665,HMAC_671) in
        {49}in(c_in, a_689);
        {50}let Dec_690 = dec(a_689,kPS_681) in
        {51}let Enc_693 = enc(Dec_690,kSP_685) in
        {52}out(c_out, Enc_693);
        (
            {53}!
            {54}in(c_in, a_5173);
            {55}if (c_0() = a_5173) then
            {56}event bad();
            {57}let Pars1_5177 = pars1(a_5173) in
            {58}if (c_50() = Pars1_5177) then
            {59}event bad();
            {60}let Pars2_5183 = pars2(a_5173) in
            {61}if (c_256() = Pars2_5183) then
            {62}event bad()
        ) | (
            {63}!
            {64}in(c_in, a_6160);
            {65}let Dec_6161 = dec(a_6160,kPS_681) in
            {66}let Ver_6165 = verify(Dec_6161,pkP) in
            {67}if (Ver_6165 = true()) then
            {68}event AcceptS2(pkS,pkP)
        )
    )
)

--  Process 1 (that is, process 0, with let moved downwards):
{1}!
{2}new skS;
{3}let pkS = pk(skS) in
{4}out(c_out, pkS);
{5}!
{6}new skP;
{7}let pkP = pk(skP) in
{8}out(c_out, pkP);
(
    {9}!
    {10}new a;
    {11}let gA = kgen(g(),a) in
    {12}out(c_out, gA);
    {13}in(c_in, B);
    {14}in(c_in, sig);
    {15}in(c_in, opks);
    {16}if (pkS = opks) then
    {19}let x = verify(sig,pkS) in
    {20}if (x = true()) then
    {21}event AcceptP(pkS,pkP);
    {18}let k_1 = kgen(B,a) in
    {17}let h_1 = hash3(gA,B,pkS) in
    {22}let kPS_1 = kdfPtoS(k_1,h_1) in
    {24}out(c_out, enc(user_auth(),kPS_1));
    {25}in(c_in, userauth_answer);
    {23}let kSP_1 = kdfStoP(k_1,h_1) in
    {26}if (dec(userauth_answer,kSP_1) = user_auth()) then
    {27}event AcceptP2(pkS,pkP);
    {28}let y = conc(c_50(),c_128()) in
    {29}out(c_out, y);
    {30}out(c_out, enc(sign(user_answer(),skP),kPS_1))
) | (
    {31}!
    (
        {32}!
        {33}in(c_in, a_63);
        {34}if (c_0() = a_63) then
        {35}event bad()
    ) | (
        {36}!
        {37}in(c_in, a_429);
        {38}new SKey_661;
        {39}let sk_663 = kgen(g(),SKey_661) in
        {40}out(c_out, sk_663);
        {43}event AcceptS(pkS,pkP);
        {45}out(c_out, sign(inputs(),skS));
        {46}out(c_out, pkS);
        {49}in(c_in, a_689);
        {42}let HMAC_671 = hash3(a_429,sk_663,pkS) in
        {41}let kAB_665 = kgen(a_429,SKey_661) in
        {47}let kPS_681 = kdfPtoS(kAB_665,HMAC_671) in
        {50}let Dec_690 = dec(a_689,kPS_681) in
        {48}let kSP_685 = kdfStoP(kAB_665,HMAC_671) in
        {51}let Enc_693 = enc(Dec_690,kSP_685) in
        {52}out(c_out, Enc_693);
        (
            {53}!
            {54}in(c_in, a_5173);
            {55}if (c_0() = a_5173) then
            {56}event bad();
            {57}let Pars1_5177 = pars1(a_5173) in
            {58}if (c_50() = Pars1_5177) then
            {59}event bad();
            {60}let Pars2_5183 = pars2(a_5173) in
            {61}if (c_256() = Pars2_5183) then
            {62}event bad()
        ) | (
            {63}!
            {64}in(c_in, a_6160);
            {65}let Dec_6161 = dec(a_6160,kPS_681) in
            {66}let Ver_6165 = verify(Dec_6161,pkP) in
            {67}if (Ver_6165 = true()) then
            {68}event AcceptS2(pkS,pkP)
        )
    )
)

-- Query ev:AcceptP(i,j) ==> ev:AcceptS(i,l) in process 1.
Translating the process into Horn clauses...
Completing...
Starting query ev:AcceptP(i,j) ==> ev:AcceptS(i,l)
goal reachable: begin:AcceptS(pk(skS_1),pk(skP_1)) -> end:AcceptP(pk(skS_1),pk(skP_2))
Abbreviations:
skS_1 = skS[!1 = @sid]
skP_2 = skP[!2 = @sid_1,!1 = @sid]
skP_1 = skP[!2 = @sid_2,!1 = @sid]
RESULT ev:AcceptP(i,j) ==> ev:AcceptS(i,l) is true.
-- Query ev:AcceptS2(i,j) ==> ev:AcceptP2(i,j) in process 1.
Translating the process into Horn clauses...
Completing...
Starting query ev:AcceptS2(i,j) ==> ev:AcceptP2(i,j)
goal reachable: begin:AcceptP2(pk(skS_1),pk(skP_1)) -> end:AcceptS2(pk(skS_1),pk(skP_1))
Abbreviations:
skS_1 = skS[!1 = @sid]
skP_1 = skP[!2 = @sid_1,!1 = @sid]
RESULT ev:AcceptS2(i,j) ==> ev:AcceptP2(i,j) is true.
-- Query not ev:AcceptP(i,j) in process 1.
Translating the process into Horn clauses...
Completing...
Starting query not ev:AcceptP(i,j)
goal reachable: end:AcceptP(pk(skS_1),pk(skP_1))
Abbreviations:
skS_1 = skS[!1 = @sid]
skP_1 = skP[!2 = @sid_1,!1 = @sid]

Derivation:
Abbreviations:
skS_1 = skS[!1 = @sid]
skP_1 = skP[!2 = @sid_1,!1 = @sid]

1. The attacker has some term B_1.
attacker:B_1.

2. The attacker has some term a_1.
attacker:a_1.

3. The message a_1 that the attacker may have by 2 may be received at input {37}.
So the message sign(inputs(),skS_1) may be sent to the attacker at output {45}.
attacker:sign(inputs(),skS_1).

4. The message pk(skS_1) may be sent to the attacker at output {4}.
attacker:pk(skS_1).

5. The message B_1 that the attacker may have by 1 may be received at input {13}.
The message sign(inputs(),skS_1) that the attacker may have by 3 may be received at input {14}.
The message pk(skS_1) that the attacker may have by 4 may be received at input {15}.
So event AcceptP(pk(skS_1),pk(skP_1)) may be executed at {21}.
end:AcceptP(pk(skS_1),pk(skP_1)).

6. By 5, end:AcceptP(pk(skS_1),pk(skP_1)).
The goal is reached, represented in the following fact:
end:AcceptP(pk(skS_1),pk(skP_1)).


A more detailed output of the traces is available with
  param traceDisplay = long.

new skS creating skS_1 at {2} in copy a_1

out(c_out, ~M) with ~M = pk(skS_1) at {4} in copy a_1

new skP creating skP_1 at {6} in copy a_1, a_2

out(c_out, ~M_1) with ~M_1 = pk(skP_1) at {8} in copy a_1, a_2

new a creating a_3 at {10} in copy a_1, a_2, a_4

out(c_out, ~M_2) with ~M_2 = kgen(g(),a_3) at {12} in copy a_1, a_2, a_4

new skP creating skP_2 at {6} in copy a_1, a_5

out(c_out, ~M_3) with ~M_3 = pk(skP_2) at {8} in copy a_1, a_5

in(c_in, a_6) at {37} in copy a_1, a_5, a_7, a_8

new SKey_661 creating SKey at {38} in copy a_1, a_5, a_7, a_8

out(c_out, ~M_4) with ~M_4 = kgen(g(),SKey) at {40} in copy a_1, a_5, a_7, a_8

event AcceptS(pk(skS_1),pk(skP_2)) at {43} in copy a_1, a_5, a_7, a_8

out(c_out, ~M_5) with ~M_5 = sign(inputs(),skS_1) at {45} in copy a_1, a_5, a_7, a_8

out(c_out, ~M_6) with ~M_6 = pk(skS_1) at {46} in copy a_1, a_5, a_7, a_8

in(c_in, a_9) at {13} in copy a_1, a_2, a_4

in(c_in, ~M_5) with ~M_5 = sign(inputs(),skS_1) at {14} in copy a_1, a_2, a_4

in(c_in, ~M) with ~M = pk(skS_1) at {15} in copy a_1, a_2, a_4

event AcceptP(pk(skS_1),pk(skP_1)) at {21} in copy a_1, a_2, a_4 (goal)

The event AcceptP(pk(skS_1),pk(skP_1)) is executed at {21} in copy a_1, a_2, a_4.
A trace has been found.
RESULT not ev:AcceptP(i,j) is false.
-- Query not ev:AcceptP2(i,j) in process 1.
Translating the process into Horn clauses...
Completing...
Starting query not ev:AcceptP2(i,j)
goal reachable: end:AcceptP2(pk(skS_1),pk(skP_1))
Abbreviations:
skS_1 = skS[!1 = @sid]
skP_1 = skP[!2 = @sid_1,!1 = @sid]

Derivation:
Abbreviations:
skS_1 = skS[!1 = @sid]
skP_1 = skP[!2 = @sid_1,!1 = @sid]
a_1 = a[!3 = @sid_2,!2 = @sid_1,!1 = @sid]

1. Using the function g the attacker may obtain g().
attacker:g().

2. The attacker has some term a_2.
attacker:a_2.

3. The message a_2 that the attacker may have by 2 may be received at input {37}.
So the message sign(inputs(),skS_1) may be sent to the attacker at output {45}.
attacker:sign(inputs(),skS_1).

4. The message pk(skS_1) may be sent to the attacker at output {4}.
attacker:pk(skS_1).

5. The message kgen(g(),a_1) may be sent to the attacker at output {12}.
attacker:kgen(g(),a_1).

6. By 5, the attacker may know kgen(g(),a_1).
By 1, the attacker may know g().
By 4, the attacker may know pk(skS_1).
Using the function hash3 the attacker may obtain hash3(kgen(g(),a_1),g(),pk(skS_1)).
attacker:hash3(kgen(g(),a_1),g(),pk(skS_1)).

7. By 5, the attacker may know kgen(g(),a_1).
By 6, the attacker may know hash3(kgen(g(),a_1),g(),pk(skS_1)).
Using the function kdfStoP the attacker may obtain kdfStoP(kgen(g(),a_1),hash3(kgen(g(),a_1),g(),pk(skS_1))).
attacker:kdfStoP(kgen(g(),a_1),hash3(kgen(g(),a_1),g(),pk(skS_1))).

8. Using the function user_auth the attacker may obtain user_auth().
attacker:user_auth().

9. By 8, the attacker may know user_auth().
By 7, the attacker may know kdfStoP(kgen(g(),a_1),hash3(kgen(g(),a_1),g(),pk(skS_1))).
Using the function enc the attacker may obtain enc(user_auth(),kdfStoP(kgen(g(),a_1),hash3(kgen(g(),a_1),g(),pk(skS_1)))).
attacker:enc(user_auth(),kdfStoP(kgen(g(),a_1),hash3(kgen(g(),a_1),g(),pk(skS_1)))).

10. The message g() that the attacker may have by 1 may be received at input {13}.
The message sign(inputs(),skS_1) that the attacker may have by 3 may be received at input {14}.
The message pk(skS_1) that the attacker may have by 4 may be received at input {15}.
The message enc(user_auth(),kdfStoP(kgen(g(),a_1),hash3(kgen(g(),a_1),g(),pk(skS_1)))) that the attacker may have by 9 may be received at input {25}.
So event AcceptP2(pk(skS_1),pk(skP_1)) may be executed at {27}.
end:AcceptP2(pk(skS_1),pk(skP_1)).

11. By 10, end:AcceptP2(pk(skS_1),pk(skP_1)).
The goal is reached, represented in the following fact:
end:AcceptP2(pk(skS_1),pk(skP_1)).


A more detailed output of the traces is available with
  param traceDisplay = long.

new skS creating skS_1 at {2} in copy a_1

out(c_out, ~M) with ~M = pk(skS_1) at {4} in copy a_1

new skP creating skP_1 at {6} in copy a_1, a_2

out(c_out, ~M_1) with ~M_1 = pk(skP_1) at {8} in copy a_1, a_2

new a creating a_3 at {10} in copy a_1, a_2, a_4

out(c_out, ~M_2) with ~M_2 = kgen(g(),a_3) at {12} in copy a_1, a_2, a_4

new skP creating skP_2 at {6} in copy a_1, a_5

out(c_out, ~M_3) with ~M_3 = pk(skP_2) at {8} in copy a_1, a_5

in(c_in, a_6) at {37} in copy a_1, a_5, a_7, a_8

new SKey_661 creating SKey at {38} in copy a_1, a_5, a_7, a_8

out(c_out, ~M_4) with ~M_4 = kgen(g(),SKey) at {40} in copy a_1, a_5, a_7, a_8

event AcceptS(pk(skS_1),pk(skP_2)) at {43} in copy a_1, a_5, a_7, a_8

out(c_out, ~M_5) with ~M_5 = sign(inputs(),skS_1) at {45} in copy a_1, a_5, a_7, a_8

out(c_out, ~M_6) with ~M_6 = pk(skS_1) at {46} in copy a_1, a_5, a_7, a_8

in(c_in, g()) at {13} in copy a_1, a_2, a_4

in(c_in, ~M_5) with ~M_5 = sign(inputs(),skS_1) at {14} in copy a_1, a_2, a_4

in(c_in, ~M) with ~M = pk(skS_1) at {15} in copy a_1, a_2, a_4

event AcceptP(pk(skS_1),pk(skP_1)) at {21} in copy a_1, a_2, a_4

out(c_out, ~M_7) with ~M_7 = enc(user_auth(),kdfPtoS(kgen(g(),a_3),hash3(kgen(g(),a_3),g(),pk(skS_1)))) at {24} in copy a_1, a_2, a_4

in(c_in, enc(user_auth(),kdfStoP(~M_2,hash3(~M_2,g(),~M)))) with enc(user_auth(),kdfStoP(~M_2,hash3(~M_2,g(),~M))) = enc(user_auth(),kdfStoP(kgen(g(),a_3),hash3(kgen(g(),a_3),g(),pk(skS_1)))) at {25} in copy a_1, a_2, a_4

event AcceptP2(pk(skS_1),pk(skP_1)) at {27} in copy a_1, a_2, a_4 (goal)

The event AcceptP2(pk(skS_1),pk(skP_1)) is executed at {27} in copy a_1, a_2, a_4.
A trace has been found.
RESULT not ev:AcceptP2(i,j) is false.
-- Query not ev:AcceptS(i,j) in process 1.
Translating the process into Horn clauses...
Completing...
Starting query not ev:AcceptS(i,j)
goal reachable: end:AcceptS(pk(skS_1),pk(skP_1))
Abbreviations:
skS_1 = skS[!1 = @sid]
skP_1 = skP[!2 = @sid_1,!1 = @sid]

Derivation:
Abbreviations:
skS_1 = skS[!1 = @sid]
skP_1 = skP[!2 = @sid_1,!1 = @sid]

1. The attacker has some term a_1.
attacker:a_1.

2. The message a_1 that the attacker may have by 1 may be received at input {37}.
So event AcceptS(pk(skS_1),pk(skP_1)) may be executed at {43}.
end:AcceptS(pk(skS_1),pk(skP_1)).

3. By 2, end:AcceptS(pk(skS_1),pk(skP_1)).
The goal is reached, represented in the following fact:
end:AcceptS(pk(skS_1),pk(skP_1)).


A more detailed output of the traces is available with
  param traceDisplay = long.

new skS creating skS_1 at {2} in copy a_1

out(c_out, ~M) with ~M = pk(skS_1) at {4} in copy a_1

new skP creating skP_1 at {6} in copy a_1, a_2

out(c_out, ~M_1) with ~M_1 = pk(skP_1) at {8} in copy a_1, a_2

in(c_in, a_3) at {37} in copy a_1, a_2, a_4, a_5

new SKey_661 creating SKey at {38} in copy a_1, a_2, a_4, a_5

out(c_out, ~M_2) with ~M_2 = kgen(g(),SKey) at {40} in copy a_1, a_2, a_4, a_5

event AcceptS(pk(skS_1),pk(skP_1)) at {43} in copy a_1, a_2, a_4, a_5 (goal)

The event AcceptS(pk(skS_1),pk(skP_1)) is executed at {43} in copy a_1, a_2, a_4, a_5.
A trace has been found.
RESULT not ev:AcceptS(i,j) is false.
-- Query not ev:AcceptS2(i,j) in process 1.
Translating the process into Horn clauses...
Completing...
Starting query not ev:AcceptS2(i,j)
goal reachable: end:AcceptS2(pk(skS_1),pk(skP_1))
Abbreviations:
skS_1 = skS[!1 = @sid]
skP_1 = skP[!2 = @sid_1,!1 = @sid]

Derivation:
Abbreviations:
skS_1 = skS[!1 = @sid]
skP_1 = skP[!2 = @sid_1,!1 = @sid]
a_1 = a[!3 = @sid_2,!2 = @sid_1,!1 = @sid]
SKey = SKey_661[a_429 = kgen(g(),a_1),!4 = @sid_3,!3 = @sid_4,!2 = @sid_1,!1 = @sid]

1. The message kgen(g(),a_1) may be sent to the attacker at output {12}.
attacker:kgen(g(),a_1).

2. The message kgen(g(),a_1) that the attacker may have by 1 may be received at input {37}.
So the message kgen(g(),SKey) may be sent to the attacker at output {40}.
attacker:kgen(g(),SKey).

3. The attacker has some term a_2.
attacker:a_2.

4. The message a_2 that the attacker may have by 3 may be received at input {37}.
So the message sign(inputs(),skS_1) may be sent to the attacker at output {45}.
attacker:sign(inputs(),skS_1).

5. The message pk(skS_1) may be sent to the attacker at output {4}.
attacker:pk(skS_1).

6. The message kgen(g(),SKey) that the attacker may have by 2 may be received at input {13}.
The message sign(inputs(),skS_1) that the attacker may have by 4 may be received at input {14}.
The message pk(skS_1) that the attacker may have by 5 may be received at input {15}.
So the message enc(user_auth(),kdfPtoS(kgen(kgen(g(),a_1),SKey),hash3(kgen(g(),a_1),kgen(g(),SKey),pk(skS_1)))) may be sent to the attacker at output {24}.
attacker:enc(user_auth(),kdfPtoS(kgen(kgen(g(),a_1),SKey),hash3(kgen(g(),a_1),kgen(g(),SKey),pk(skS_1)))).

7. The message kgen(g(),a_1) that the attacker may have by 1 may be received at input {37}.
The message enc(user_auth(),kdfPtoS(kgen(kgen(g(),a_1),SKey),hash3(kgen(g(),a_1),kgen(g(),SKey),pk(skS_1)))) that the attacker may have by 6 may be received at input {49}.
So the message enc(user_auth(),kdfStoP(kgen(kgen(g(),a_1),SKey),hash3(kgen(g(),a_1),kgen(g(),SKey),pk(skS_1)))) may be sent to the attacker at output {52}.
attacker:enc(user_auth(),kdfStoP(kgen(kgen(g(),a_1),SKey),hash3(kgen(g(),a_1),kgen(g(),SKey),pk(skS_1)))).

8. The message kgen(g(),SKey) that the attacker may have by 2 may be received at input {13}.
The message sign(inputs(),skS_1) that the attacker may have by 4 may be received at input {14}.
The message pk(skS_1) that the attacker may have by 5 may be received at input {15}.
The message enc(user_auth(),kdfStoP(kgen(kgen(g(),a_1),SKey),hash3(kgen(g(),a_1),kgen(g(),SKey),pk(skS_1)))) that the attacker may have by 7 may be received at input {25}.
So the message enc(sign(user_answer(),skP_1),kdfPtoS(kgen(kgen(g(),a_1),SKey),hash3(kgen(g(),a_1),kgen(g(),SKey),pk(skS_1)))) may be sent to the attacker at output {30}.
attacker:enc(sign(user_answer(),skP_1),kdfPtoS(kgen(kgen(g(),a_1),SKey),hash3(kgen(g(),a_1),kgen(g(),SKey),pk(skS_1)))).

9. The message kgen(g(),a_1) that the attacker may have by 1 may be received at input {37}.
The message enc(user_auth(),kdfPtoS(kgen(kgen(g(),a_1),SKey),hash3(kgen(g(),a_1),kgen(g(),SKey),pk(skS_1)))) that the attacker may have by 6 may be received at input {49}.
The message enc(sign(user_answer(),skP_1),kdfPtoS(kgen(kgen(g(),a_1),SKey),hash3(kgen(g(),a_1),kgen(g(),SKey),pk(skS_1)))) that the attacker may have by 8 may be received at input {64}.
So event AcceptS2(pk(skS_1),pk(skP_1)) may be executed at {68}.
end:AcceptS2(pk(skS_1),pk(skP_1)).

10. By 9, end:AcceptS2(pk(skS_1),pk(skP_1)).
The goal is reached, represented in the following fact:
end:AcceptS2(pk(skS_1),pk(skP_1)).


A more detailed output of the traces is available with
  param traceDisplay = long.

new skS creating skS_1 at {2} in copy a_1

out(c_out, ~M) with ~M = pk(skS_1) at {4} in copy a_1

new skP creating skP_1 at {6} in copy a_1, a_2

out(c_out, ~M_1) with ~M_1 = pk(skP_1) at {8} in copy a_1, a_2

new a creating a_3 at {10} in copy a_1, a_2, a_4

out(c_out, ~M_2) with ~M_2 = kgen(g(),a_3) at {12} in copy a_1, a_2, a_4

new skP creating skP_2 at {6} in copy a_1, a_5

out(c_out, ~M_3) with ~M_3 = pk(skP_2) at {8} in copy a_1, a_5

in(c_in, a_6) at {37} in copy a_1, a_5, a_7, a_8

new SKey_661 creating SKey at {38} in copy a_1, a_5, a_7, a_8

out(c_out, ~M_4) with ~M_4 = kgen(g(),SKey) at {40} in copy a_1, a_5, a_7, a_8

event AcceptS(pk(skS_1),pk(skP_2)) at {43} in copy a_1, a_5, a_7, a_8

out(c_out, ~M_5) with ~M_5 = sign(inputs(),skS_1) at {45} in copy a_1, a_5, a_7, a_8

out(c_out, ~M_6) with ~M_6 = pk(skS_1) at {46} in copy a_1, a_5, a_7, a_8

in(c_in, ~M_2) with ~M_2 = kgen(g(),a_3) at {37} in copy a_1, a_2, a_9, a_10

new SKey_661 creating SKey_1 at {38} in copy a_1, a_2, a_9, a_10

out(c_out, ~M_7) with ~M_7 = kgen(g(),SKey_1) at {40} in copy a_1, a_2, a_9, a_10

event AcceptS(pk(skS_1),pk(skP_1)) at {43} in copy a_1, a_2, a_9, a_10

out(c_out, ~M_8) with ~M_8 = sign(inputs(),skS_1) at {45} in copy a_1, a_2, a_9, a_10

out(c_out, ~M_9) with ~M_9 = pk(skS_1) at {46} in copy a_1, a_2, a_9, a_10

in(c_in, ~M_7) with ~M_7 = kgen(g(),SKey_1) at {13} in copy a_1, a_2, a_4

in(c_in, ~M_5) with ~M_5 = sign(inputs(),skS_1) at {14} in copy a_1, a_2, a_4

in(c_in, ~M) with ~M = pk(skS_1) at {15} in copy a_1, a_2, a_4

event AcceptP(pk(skS_1),pk(skP_1)) at {21} in copy a_1, a_2, a_4

out(c_out, ~M_10) with ~M_10 = enc(user_auth(),kdfPtoS(kgen(kgen(g(),SKey_1),a_3),hash3(kgen(g(),a_3),kgen(g(),SKey_1),pk(skS_1)))) at {24} in copy a_1, a_2, a_4

in(c_in, ~M_10) with ~M_10 = enc(user_auth(),kdfPtoS(kgen(kgen(g(),a_3),SKey_1),hash3(kgen(g(),a_3),kgen(g(),SKey_1),pk(skS_1)))) at {49} in copy a_1, a_2, a_9, a_10

out(c_out, ~M_11) with ~M_11 = enc(user_auth(),kdfStoP(kgen(kgen(g(),a_3),SKey_1),hash3(kgen(g(),a_3),kgen(g(),SKey_1),pk(skS_1)))) at {52} in copy a_1, a_2, a_9, a_10

in(c_in, ~M_11) with ~M_11 = enc(user_auth(),kdfStoP(kgen(kgen(g(),a_3),SKey_1),hash3(kgen(g(),a_3),kgen(g(),SKey_1),pk(skS_1)))) at {25} in copy a_1, a_2, a_4

event AcceptP2(pk(skS_1),pk(skP_1)) at {27} in copy a_1, a_2, a_4

out(c_out, ~M_12) with ~M_12 = conc(c_50(),c_128()) at {29} in copy a_1, a_2, a_4

out(c_out, ~M_13) with ~M_13 = enc(sign(user_answer(),skP_1),kdfPtoS(kgen(kgen(g(),SKey_1),a_3),hash3(kgen(g(),a_3),kgen(g(),SKey_1),pk(skS_1)))) at {30} in copy a_1, a_2, a_4

in(c_in, ~M_13) with ~M_13 = enc(sign(user_answer(),skP_1),kdfPtoS(kgen(kgen(g(),a_3),SKey_1),hash3(kgen(g(),a_3),kgen(g(),SKey_1),pk(skS_1)))) at {64} in copy a_1, a_2, a_9, a_10, a_11

event AcceptS2(pk(skS_1),pk(skP_1)) at {68} in copy a_1, a_2, a_9, a_10, a_11 (goal)

The event AcceptS2(pk(skS_1),pk(skP_1)) is executed at {68} in copy a_1, a_2, a_9, a_10, a_11.
A trace has been found.
RESULT not ev:AcceptS2(i,j) is false.

RESULT ev:AcceptP(i,j) ==> ev:AcceptS(i,l) is true.
RESULT ev:AcceptS2(i,j) ==> ev:AcceptP2(i,j) is true.
RESULT not ev:AcceptP(i,j) is false.
RESULT not ev:AcceptP2(i,j) is false.
RESULT not ev:AcceptS(i,j) is false.
RESULT not ev:AcceptS2(i,j) is false.


