
free c_in.
free c_out.

fun true/0.

(********************************
  Crypto
*********************************)
fun E/3.
fun enc/2.

fun kgen/2.
fun hash/3.


fun conc/2.

reduc pars1(conc(arg0, arg1)) = arg0.

reduc pars2(conc(arg0, arg1)) = arg1.


fun c_0/0.
fun c_1/0.
fun c_256/0.
fun c_50/0.
fun c_128/0.

data const_4294967295/0.
data userauth_pk_ok/0.
data user_answer/0.
data user_auth/0.
data server_sign/0.
data Cipher/0.
data g/0.
data k_94/0.
data inputs/0.
data kPS/0.
data kSP/0.
data k/0.
data h/0.
data R15_421/0.
data R0_314/0.
data R4_277/0.
data R5_280/0.
data const_30/0.
data R3_257/0.
data R2_213/0.
data R3_210/0.
data R2_191/0.
data R1_188/0.
data R0_117/0.


equation kgen(kgen(g(),a),b) = kgen(kgen(g(),b),a).

fun hash3/3.

fun kdfPtoS/2. 
fun kdfStoP/2.

fun pk/1.
(********************************
  Key lookup
*********************************)
fun sign/2.

reduc verify(sign(x,y), pk(y)) = true.

reduc dec(enc(m,i),i) = m.



(*************************** 
  Encoders 
***************************)


(******************** 
  Parsers 
********************)


(*************************** 
  Arithmetic Functions 
***************************)


(********************************
  <Query>
*********************************)

(* Authentication property *)

query ev:AcceptP(i,j) ==> ev:AcceptS(i,l).

query ev:AcceptS2(i,j) ==> ev:AcceptP2(i,j).

(* Sanity check *)

query ev:AcceptP(i,j).

query ev:AcceptP2(i,j).

query ev:AcceptS(i,j).

query ev:AcceptS2(i,j).

(*************************** 
  Model 
***************************)

let client = 
new a;
let gA = kgen(g,a) in
out(c_out, gA);
in(c_in, B);
in(c_in, sig);
in(c_in, opks);
if pkS = opks then 
let h_1 = hash3(gA,B,pkS) in
let k_1 = kgen(B,a) in
let x = verify(sig,pkS) in
if x = true then 
event AcceptP(pkS, pkP);
let kPS_1 = kdfPtoS(k_1,h_1) in
let kSP_1 = kdfStoP(k_1,h_1) in
out(c_out, enc(user_auth,kPS_1));
in(c_in, userauth_answer);
if dec(userauth_answer,kSP_1) = user_auth then 
event AcceptP2(pkS, pkP);
let y = conc(c_50,c_128) in
out(c_out, y);
out(c_out, enc(sign(user_answer,skP),kPS_1)); 0 .

let server = 
!(
in(c_in, a_63);
if c_0 = a_63 then
event bad(); 
0 ) | !(
in(c_in, a_429);
new SKey_661;
let sk_663 = kgen(g,SKey_661) in
out(c_out, sk_663);
let kAB_665 = kgen(a_429,SKey_661) in
let HMAC_671 = hash3(a_429,sk_663,pkS) in
event AcceptS(pkS, pkP);
let signature_677 = sign(inputs,skS) in
out(c_out, sign(inputs,skS));
out(c_out, pkS);
let kPS_681 = kdfPtoS(kAB_665,HMAC_671) in
let kSP_685 = kdfStoP(kAB_665,HMAC_671) in
in(c_in, a_689);
let Dec_690 = dec(a_689,kPS_681) in
let Enc_693 = enc(Dec_690,kSP_685) in
out(c_out, Enc_693);
!(
in(c_in, a_5173);
if c_0 = a_5173 then
event bad(); 
let Pars1_5177 = pars1(a_5173) in
if c_50 = Pars1_5177 then 
event bad();
let Pars2_5183 = pars2(a_5173) in
if c_256 = Pars2_5183 then 
event bad();
0 ) | !(
in(c_in, a_6160);
let Dec_6161 = dec(a_6160,kPS_681) in
let Ver_6165 = verify(Dec_6161,pkP) in
if Ver_6165 = true then 
event AcceptS2(pkS, pkP); 0)) .

(********************************
  <Environment>
*********************************)

process
 !(
	new skS;
	let pkS = pk(skS) in  
	out(c_out, pkS);
       !(
		new skP;
		let pkP = pk(skP) in	 
		out(c_out, pkP);
           ((!client) | (!server))
	)
  )

