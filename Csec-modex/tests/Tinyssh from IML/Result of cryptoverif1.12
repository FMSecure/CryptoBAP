
Doing expand if, let, find... No change.
Doing simplify... Run simplify 1 time(s). Fixpoint reached.
No change.
Doing move all binders... Done.
Doing remove assignments of useless... Done.
Trying equivalence
equiv ! !_33 <= @5_N3 new @5_r: skeyseed; (
  ! !_34 <= @5_N @5_Omac(@5_x: bitstring) := HMAC_sha1(@5_x, mkgen(@5_r)),
  ! !_35 <= @5_N2 @5_Ocheck(@5_m: bitstring, @5_ma: bitstring) := HMAC_sha1_check(@5_m, mkgen(@5_r), @5_ma))
<=(@5_N3 * Pmac(time + (@5_N3 - 1.) * (time(mkgen) + @5_N * time(HMAC_sha1, maxlength(@5_x[!_34, !_33])) + @5_N2 * time(HMAC_sha1_check, maxlength(@5_m[!_35, !_33]), maxlength(@5_ma[!_35, !_33]))), @5_N, @5_N2, max(maxlength(@5_x[!_34, !_33]), maxlength(@5_m[!_35, !_33]))))=> [computational]
      ! !_36 <= @5_N3 new @5_r: skeyseed [unchanged]; (
  ! !_37 <= @5_N @5_Omac(@5_x_49: bitstring) := let @5_x: bitstring = @5_x_49 in @5_mac2(@5_x, @5_mkgen2(@5_r)),
  ! !_38 <= @5_N2 @5_Ocheck(@5_m: bitstring, @5_ma: bitstring) := find @5_j <= @5_N suchthat defined(@5_x[@5_j]) && ((@5_m = @5_x[@5_j]) && @5_check2(@5_x[@5_j], @5_mkgen2(@5_r), @5_ma)) then true else false)
... Failed.
===================== Proof starts =======================
Initial state
Game 1 is
! !_39 <= N
in(c_in[!_39], ());
new skS: skeyseed;
let pkS: spkey = pk(skS) in
out(c_out[!_39], pkS);
! !_40 <= N
in(c_in[!_40, !_39], ());
new skP: skeyseed;
let pkP: spkey = pk(skP) in
out(c_out[!_40, !_39], pkP);
(
  ! !_41 <= N
  in(c_in[!_41, !_40, !_39], ());
  new a_43: fixed_64;
  let gA: bitstring = kgen(g, a_43) in
  out(c_out[!_41, !_40, !_39], gA);
  in(c_in[!_41, !_40, !_39], (B: bitstring, sig: bitstring, opks: bitstring));
  let sig1: signature = to_sig(sig) in
  let opkst: spkey = trans(opks) in
  if (pkS = opkst) then
  let h: bitstring = HMAC(gA, B, pkS) in
  let k: bitstring = kgen(B, a_43) in
  let x: bool = verify(sig1, pkS) in
  if (x = true) then
  event AcceptP(pkS, pkP);
  let kPS: fixed_100_key = kdfPtoS(k, h) in
  let kSP: fixed_100_key = kdfStoP(k, h) in
  out(c_out[!_41, !_40, !_39], enc(user_auth, kPS));
  in(c_in[!_41, !_40, !_39], userauth_answer: bitstring);
  let userauth_answer1: bounded_1000_ciphertext = to_cipher(userauth_answer) in
  if (dec(userauth_answer1, kSP) = user_auth) then
  event AcceptP2(pkS, pkP);
  let y: bitstring = conc(c_50, c_128) in
  out(c_out[!_41, !_40, !_39], (enc(sign(user_answer, skP), kPS), y))
) | (
  ! !_42 <= N
  in(c_in[!_42, !_40, !_39], (a_63_0: bitstring, a_429_0: bitstring));
  if (c_0 = a_429_0) then
  event bad;
  new SKey_661_0: fixed_64;
  let sk_663_0: bitstring = kgen(g, SKey_661_0) in
  let kAB_665_0: bitstring = kgen(a_429_0, SKey_661_0) in
  let HMAC_671_0: bitstring = HMAC(a_429_0, sk_663_0, pkS) in
  event AcceptS(pkS, pkP);
  let signature_677_0: signature = sign(inputs, skS) in
  let kPS_681_0: fixed_100_key = kdfPtoS(kAB_665_0, HMAC_671_0) in
  let kSP_685_0: fixed_100_key = kdfStoP(kAB_665_0, HMAC_671_0) in
  out(c_out[!_42, !_40, !_39], (sign(inputs, skS), sk_663_0));
  in(c_in[!_42, !_40, !_39], a_689_0: bitstring);
  let a_44: bounded_1000_ciphertext = to_cipher(a_689_0) in
  let Dec_690_0: signature = dec(a_44, kPS_681_0) in
  let Enc_693_0: bounded_1000_ciphertext = enc(Dec_690_0, kSP_685_0) in
  out(c_out[!_42, !_40, !_39], Enc_693_0);
  in(c_in[!_42, !_40, !_39], (a_5074_0: bitstring, a_5173_0: bitstring, a_6160_0: bitstring));
  if (c_0 = a_5173_0) then
  event bad;
  let Pars1_5177_0: bitstring = pars1(a_5173_0) in
  if (c_50 = Pars1_5177_0) then
  event bad;
  let Pars2_5183_0: bitstring = pars2(a_5173_0) in
  if (c_256 = Pars2_5183_0) then
  event bad;
  let a1: bounded_1000_ciphertext = to_cipher(a_6160_0) in
  let Dec_6161_0: signature = dec(a1, kPS_681_0) in
  let Ver_6165_0: bool = verify(Dec_6161_0, pkP) in
  if (Ver_6165_0 = true) then
  event AcceptS2(pkS, pkP)
)


Applying move all binders yields

Game 2 is
! !_39 <= N
in(c_in[!_39], ());
new skS: skeyseed;
let pkS: spkey = pk(skS) in
out(c_out[!_39], pkS);
! !_40 <= N
in(c_in[!_40, !_39], ());
new skP: skeyseed;
let pkP: spkey = pk(skP) in
out(c_out[!_40, !_39], pkP);
(
  ! !_41 <= N
  in(c_in[!_41, !_40, !_39], ());
  new a_43: fixed_64;
  let gA: bitstring = kgen(g, a_43) in
  out(c_out[!_41, !_40, !_39], gA);
  in(c_in[!_41, !_40, !_39], (B: bitstring, sig: bitstring, opks: bitstring));
  let opkst: spkey = trans(opks) in
  if (pkS = opkst) then
  let sig1: signature = to_sig(sig) in
  let x: bool = verify(sig1, pkS) in
  if (x = true) then
  event AcceptP(pkS, pkP);
  let k: bitstring = kgen(B, a_43) in
  let h: bitstring = HMAC(gA, B, pkS) in
  let kPS: fixed_100_key = kdfPtoS(k, h) in
  let kSP: fixed_100_key = kdfStoP(k, h) in
  out(c_out[!_41, !_40, !_39], enc(user_auth, kPS));
  in(c_in[!_41, !_40, !_39], userauth_answer: bitstring);
  let userauth_answer1: bounded_1000_ciphertext = to_cipher(userauth_answer) in
  if (dec(userauth_answer1, kSP) = user_auth) then
  event AcceptP2(pkS, pkP);
  let y: bitstring = conc(c_50, c_128) in
  out(c_out[!_41, !_40, !_39], (enc(sign(user_answer, skP), kPS), y))
) | (
  ! !_42 <= N
  in(c_in[!_42, !_40, !_39], (a_63_0: bitstring, a_429_0: bitstring));
  if (c_0 = a_429_0) then
  event bad;
  new SKey_661_0: fixed_64;
  let sk_663_0: bitstring = kgen(g, SKey_661_0) in
  let kAB_665_0: bitstring = kgen(a_429_0, SKey_661_0) in
  let HMAC_671_0: bitstring = HMAC(a_429_0, sk_663_0, pkS) in
  event AcceptS(pkS, pkP);
  let signature_677_0: signature = sign(inputs, skS) in
  let kPS_681_0: fixed_100_key = kdfPtoS(kAB_665_0, HMAC_671_0) in
  let kSP_685_0: fixed_100_key = kdfStoP(kAB_665_0, HMAC_671_0) in
  out(c_out[!_42, !_40, !_39], (sign(inputs, skS), sk_663_0));
  in(c_in[!_42, !_40, !_39], a_689_0: bitstring);
  let a_44: bounded_1000_ciphertext = to_cipher(a_689_0) in
  let Dec_690_0: signature = dec(a_44, kPS_681_0) in
  let Enc_693_0: bounded_1000_ciphertext = enc(Dec_690_0, kSP_685_0) in
  out(c_out[!_42, !_40, !_39], Enc_693_0);
  in(c_in[!_42, !_40, !_39], (a_5074_0: bitstring, a_5173_0: bitstring, a_6160_0: bitstring));
  if (c_0 = a_5173_0) then
  event bad;
  let Pars1_5177_0: bitstring = pars1(a_5173_0) in
  if (c_50 = Pars1_5177_0) then
  event bad;
  let Pars2_5183_0: bitstring = pars2(a_5173_0) in
  if (c_256 = Pars2_5183_0) then
  event bad;
  let a1: bounded_1000_ciphertext = to_cipher(a_6160_0) in
  let Dec_6161_0: signature = dec(a1, kPS_681_0) in
  let Ver_6165_0: bool = verify(Dec_6161_0, pkP) in
  if (Ver_6165_0 = true) then
  event AcceptS2(pkS, pkP)
)


Applying remove assignments of useless yields

Game 3 is
! !_39 <= N
in(c_in[!_39], ());
new skS: skeyseed;
let pkS: spkey = pk(skS) in
out(c_out[!_39], pkS);
! !_40 <= N
in(c_in[!_40, !_39], ());
new skP: skeyseed;
let pkP: spkey = pk(skP) in
out(c_out[!_40, !_39], pkP);
(
  ! !_41 <= N
  in(c_in[!_41, !_40, !_39], ());
  new a_43: fixed_64;
  let gA: bitstring = kgen(g, a_43) in
  out(c_out[!_41, !_40, !_39], gA);
  in(c_in[!_41, !_40, !_39], (B: bitstring, sig: bitstring, opks: bitstring));
  let opkst: spkey = trans(opks) in
  if (pkS = opkst) then
  let sig1: signature = to_sig(sig) in
  let x: bool = verify(sig1, pkS) in
  if (x = true) then
  event AcceptP(pkS, pkP);
  let k: bitstring = kgen(B, a_43) in
  let h: bitstring = HMAC(gA, B, pkS) in
  let kPS: fixed_100_key = kdfPtoS(k, h) in
  let kSP: fixed_100_key = kdfStoP(k, h) in
  out(c_out[!_41, !_40, !_39], enc(user_auth, kPS));
  in(c_in[!_41, !_40, !_39], userauth_answer: bitstring);
  let userauth_answer1: bounded_1000_ciphertext = to_cipher(userauth_answer) in
  if (dec(userauth_answer1, kSP) = user_auth) then
  event AcceptP2(pkS, pkP);
  let y: bitstring = conc(c_50, c_128) in
  out(c_out[!_41, !_40, !_39], (enc(sign(user_answer, skP), kPS), y))
) | (
  ! !_42 <= N
  in(c_in[!_42, !_40, !_39], (a_63_0: bitstring, a_429_0: bitstring));
  if (c_0 = a_429_0) then
  event bad;
  new SKey_661_0: fixed_64;
  let sk_663_0: bitstring = kgen(g, SKey_661_0) in
  let kAB_665_0: bitstring = kgen(a_429_0, SKey_661_0) in
  let HMAC_671_0: bitstring = HMAC(a_429_0, sk_663_0, pkS) in
  event AcceptS(pkS, pkP);
  let kPS_681_0: fixed_100_key = kdfPtoS(kAB_665_0, HMAC_671_0) in
  let kSP_685_0: fixed_100_key = kdfStoP(kAB_665_0, HMAC_671_0) in
  out(c_out[!_42, !_40, !_39], (sign(inputs, skS), sk_663_0));
  in(c_in[!_42, !_40, !_39], a_689_0: bitstring);
  let a_44: bounded_1000_ciphertext = to_cipher(a_689_0) in
  let Dec_690_0: signature = dec(a_44, kPS_681_0) in
  let Enc_693_0: bounded_1000_ciphertext = enc(Dec_690_0, kSP_685_0) in
  out(c_out[!_42, !_40, !_39], Enc_693_0);
  in(c_in[!_42, !_40, !_39], (a_5074_0: bitstring, a_5173_0: bitstring, a_6160_0: bitstring));
  if (c_0 = a_5173_0) then
  event bad;
  let Pars1_5177_0: bitstring = pars1(a_5173_0) in
  if (c_50 = Pars1_5177_0) then
  event bad;
  let Pars2_5183_0: bitstring = pars2(a_5173_0) in
  if (c_256 = Pars2_5183_0) then
  event bad;
  let a1: bounded_1000_ciphertext = to_cipher(a_6160_0) in
  let Dec_6161_0: signature = dec(a1, kPS_681_0) in
  let Ver_6165_0: bool = verify(Dec_6161_0, pkP) in
  if (Ver_6165_0 = true) then
  event AcceptS2(pkS, pkP)
)

RESULT Could not prove event AcceptS2(i, j) ==> AcceptP2(i, j), event AcceptP(i, j) ==> AcceptS(i, l).

