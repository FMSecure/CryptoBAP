
free c_in.
free c_out.

fun true/0.

(********************************
  Crypto
*********************************)
fun E/3.
fun enc/2.

fun kgen/2.

data const_0/0.
data const_4294967295/0.
data userauth_pk_ok/0.
data user_answer/0.
data user_auth/0.
data server_sign/0.
data Cipher/0.
data g/0.
data k_94/0.
data inputs/0.
data kPS/0.
data kSP/0.
data k/0.
data h/0.
data R15_421/0.
data R0_314/0.
data R4_277/0.
data R5_280/0.
data const_30/0.
data R3_257/0.
data R2_213/0.
data R3_210/0.
data R2_191/0.
data R1_188/0.
data R0_117/0.


equation kgen(kgen(g(),a),b) = kgen(kgen(g(),b),a).

fun hash3/3.

fun kdfPtoS/2. 
fun kdfStoP/2.

fun pk/1.
(********************************
  Key lookup
*********************************)
fun sign/2.

reduc verify(sign(x,y), pk(y)) = true.

reduc dec(enc(m,i),i) = m.


(********************************
  <Query>
*********************************)

(* Authentication property *)

query ev:AcceptP(i,j) ==> ev:AcceptS(i,l).

query ev:AcceptS2(i,j) ==> ev:AcceptP2(i,j).

(* Sanity check *)

query ev:AcceptP(i,j).

query ev:AcceptP2(i,j).

query ev:AcceptS(i,j).

query ev:AcceptS2(i,j).

(********************************
  <Model>
*********************************)

let client = 0. 

let server = 0 .

(********************************
  <Environment>
*********************************)

process
 !(
	new skS;
	let pkS = pk(skS) in  
	out(c_out, pkS);
       !(
		new skP;
		let pkP = pk(skP) in	 
		out(c_out, pkP);
           ((!client) | (!server))
	)
  )

