
(**********************************
  Tinyssh protocol.
***********************************)

param N.

channel c_in, c_out.

type nondet [fixed].
type bounded_1000_payload [bounded].
type fixed_64 [fixed, large].
(********************************
  IND-CPA INT-CTXT encryption
*********************************)
type key.
type passwd [fixed, large].
type G [fixed].


type keyseed_T [fixed, large].
(* 100 is MAX_SIZE_KEY in the code. *)
type fixed_100_key [fixed].
type bounded_1000_ciphertext [bounded].
type bounded_200_cleartext [bounded].
type fixed_256_seed_T [fixed].

type spkey [bounded].
type sskey [bounded].
type skeyseed [large,fixed].
type sseed [fixed].
type signature [bounded].
type sblocksize [bounded].

proba Psign.
proba Psigncoll.
proba Penc.
proba Penccoll.
(*
expand IND_CCA2_public_key_enc(keyseed_T, spkey, sskey, bounded_200_cleartext, bounded_1000_ciphertext, fixed_256_seed_T, pk, ek, enc, dec, injbot, Z, Penc, Penccoll).*)


fun kgen(bitstring, fixed_64): bitstring.
forall g:bitstring, a:fixed_64, b:fixed_64; kgen(kgen(g,a),b) = kgen(kgen(g,b),a).
proba Pmac.
expand UF_CMA_mac(skeyseed, spkey, bitstring, bitstring, mkgen, HMAC_sha1, HMAC_sha1_check, Pmac).

forall m: bitstring, k: spkey, r: bitstring;
  ((HMAC_sha1(m, k)) = r) = HMAC_sha1_check(m, k, r).

(* CR-someday: giving this a precise return type would allow to remove more checks. *) 
fun HMAC(bitstring, bitstring, spkey): bitstring.
  
const arithmetic1: bitstring.

(* ASSERT_DEFINITION
  arithmetic1/0
  "sha1"
*)

forall m: bitstring, k: spkey;
  HMAC(arithmetic1, m, k) = HMAC_sha1(m, k).

(*
expand UF_CMA_signature(skeyseed, spkey, sskey, sblocksize, signature, sseed, sk, vk, sign, check, Psign, Psigncoll).

fun cert(fixed_100_key, bounded_40_host): sblocksize [compos].

fun check_key(bounded_40_host, fixed_100_key, signature, spkey): bool.

forall h: bounded_40_host, k: fixed_100_key, sig: signature, pkS: spkey;
  check_key(h, k, sig, pkS) = check(cert(k, h), pkS, sig).*)

(*************************** 
  Key lookup
***************************)

fun kdfPtoS(bitstring, bitstring): fixed_100_key.
fun kdfStoP(bitstring, bitstring): fixed_100_key.
(* the ids of a designated pair of honest participants *) 


const user_answer: bounded_1000_ciphertext.
const user_auth: signature.
const inputs: bounded_1000_ciphertext.
const server_sign: bitstring.


fun pk(skeyseed):spkey.
fun sign(bounded_1000_ciphertext, skeyseed): signature.
fun verify(signature, spkey): bool.
forall x: bounded_1000_ciphertext, y: skeyseed; verify(sign(x,y), pk(y)) = true.

fun to_sig(bitstring):signature.
fun trans(bitstring):spkey.
fun to_cipher(bitstring):bounded_1000_ciphertext.
const g : bitstring.

fun enc(signature, fixed_100_key): bounded_1000_ciphertext.
fun dec(bounded_1000_ciphertext, fixed_100_key): signature.
forall h: signature, i: fixed_100_key;
  dec(enc(h,i),i) = h.

(********************************
  <Query>
*********************************)
(* Authentication of the client to the server *)

event AcceptS(spkey, spkey).
event AcceptP(spkey, spkey).
event AcceptS2(spkey, spkey).
event AcceptP2(spkey, spkey).

query i: spkey, j: spkey, l: spkey;
  event AcceptP(i, j) ==> AcceptS(i, l).

query i: spkey, j: spkey;
    event AcceptS2(i, j) ==> AcceptP2(i, j).
(*************************** 
  <Model> 
***************************)

let client = 0 . 
let server = 0 .

(********************************
  <Environment>
*********************************)

process 
! N(
	in(c_in, ());
	new skS : skeyseed;
	let pkS = pk(skS) in  
	out(c_out, pkS);
	! N (
		in(c_in, ());
		new skP : skeyseed;
		let pkP = pk(skP) in	 
		out(c_out, pkP);
		(! N client) | (! N server)
  )
)

