bir_auxiliaryScript
==============================================
- some helper definitions and theorems




bir_immScript + Syntax (relies on nothing)
==============================================
- bir_imm_t = Imm1  .. | Imm8  .. | Imm16 .. | Imm32 .. | Imm64 ..
- bir_immtype_t = Bit1 | Bit8 | Bit16 | Bit32 | Bit64
- type_of_bir_imm (ImmXY  _) = BitXY
- size_of_bir_immtype BitXY  = XY
- bir_immtype_of_size n
- is_valid_bir_immtype_size n
(* numbers *)
- b2n ( ImmXY  w ) = w2n w
- n2bs n BitXY  = ImmXY  (n2w n)
- n2b_XY  n = n2bs n BitXY
(* finiteness *)
- bir_immtype_t_LIST
- bir_imm_t_LIST
(* words *)
- b2w bi = n2w (b2n bi)
- w2bs w s = n2bs (w2n w) s
(* bools *)
- b2bool bi = (b2n bi <> 0)
- bool2w b = (if b then 1w else 0w):word1
- bool2b b = Imm1 (bool2w b)
(* bitstrings *)
- v2bs v s = n2bs (v2n v) s
- b2v ( ImmXY  w ) = w2v w



bir_valuesScript + Syntax (relies on bir_imm)
==============================================
- bir_val_t = BVal_Unknown | BVal_Imm .. | BVal_Mem ..
- bir_type_t = BType_Imm .. | BType_Mem ..
- BType_Bool = BType_Imm Bit1
(* val checkers *)
- bir_val_is_Unknown v / bir_val_is_Imm v / bir_val_is_Imm_s s v / bir_val_is_Bool / bir_val_is_Mem v
(* bool val *)
- bir_dest_bool_val (BVal_Imm (Imm1 w))
(* basic typing *)
- type_of_bir_val
- bir_type_is_Imm ty / bir_type_is_Imm_s s ty / bir_type_is_Bool ty / bir_type_is_Mem ty
(* finiteness *)
- bir_type_t_LIST
(* default values *)
- bir_default_value_of_type (BType_Imm s)



bir_envScript + Syntax (relies on bir_values {bir_type_t}[, bir_imm])
==============================================
- bir_var_t = BVar string bir_type_t
- bir_var_environment_t = BEnv (string |-> (bir_type_t # (bir_val_t option)))
- bir_var_name / bir_var_type
- bir_empty_env = BEnv FEMPTY
- bir_is_well_typed_env (BEnv m)
- bir_env_lookup varname (BEnv env)
- bir_env_update varname vo ty (BEnv env)
- bir_env_lookup_type var_name env
- bir_env_check_type var env
- bir_env_read v env
- bir_env_write v va env
- bir_env_varname_is_bound (BEnv env) var
- bir_env_var_is_declared env v
- bir_env_var_is_initialised env var
- bir_env_order env1 env2
- bir_env_vars_are_initialised env vs
- bir_env_domain (BEnv env)
- bir_is_subenv (BEnv env1) (BEnv env2)
- bir_env_EQ_FOR_VARS vs env1 env2


bir_imm_expScript + Syntax (relies on bir_imm)
==============================================
(* unary expressions *)
- bir_unary_exp_t = BIExp_ChangeSign | BIExp_Not | BIExp_CLZ | BIExp_CLS
- bir_HighestSetBit (w:'a word)
- bir_CountLeadingZeroBits (w:'a word)
- bir_CountLeadingSignBits (w:'a word)
- bir_word_countleadingzeros
- bir_word_countleadingsigns
- (bir_unary_exp_GET_OPER BIExp_Not = word_1comp) ...
- bir_unary_exp uo (ImmXY w) = ImmXY (bir_unary_exp_GET_OPER uo w)
(* binary expressions *)
- bir_bin_exp_t = BIExp_And | BIExp_Or | BIExp_Xor | BIExp_Plus | BIExp_Minus | BIExp_Mult | BIExp_Div | BIExp_SignedDiv | BIExp_Mod | BIExp_SignedMod | BIExp_LeftShift | BIExp_RightShift | BIExp_SignedRightShift
- (bir_bin_exp_GET_OPER BIExp_And = word_and) ....
- bir_bin_exp uo (ImmXY w1) (ImmXY w2) = ImmXY (bir_bin_exp_GET_OPER uo w1 w2)
(* binary predicates *)
- bir_bin_pred_t = BIExp_Equal | BIExp_NotEqual | BIExp_LessThan | BIExp_SignedLessThan | BIExp_LessOrEqual | BIExp_SignedLessOrEqual
- (bir_bin_pred_GET_OPER BIExp_Equal = $=) ...
- bir_bin_pred uo (ImmXY w1) (ImmXY w2) = (bir_bin_pred_GET_OPER uo w1 w2)
(* casts *)
- bir_cast r s = n2bs (b2n r) s
- bir_lcast = bir_cast
- bir_hcast r s
- w2wh (w : 'a word)
- bir_scast r s
- bir_cast_t = BIExp_UnsignedCast | BIExp_SignedCast | BIExp_HighCast | BIExp_LowCast
- bir_gencast ct



bir_mem_expScript + Syntax (relies on bir_imm)
==============================================
- bir_endian_t = BEnd_BigEndian | BEnd_LittleEndian | BEnd_NoEndian
- bir_number_of_mem_splits
(* loading *)
- bir_mem_concat vl rty
- bir_load_bitstring_from_mmap value_ty mmap (a:num)
- bir_mem_addr aty a
- bir_load_from_mem
- bir_load_from_mem_used_addrs tv tr ta en a
(* storing *)
- bitstring_split_aux
- bitstring_split n bs
- bir_update_mmap
- bir_store_in_mem
- bir_store_in_mem_used_addrs
(* memory equality *)
- bir_memeq aty vty mmap1 mmap2


================================================================================================================
================================================================================================================
================================================================================================================
================================================================================================================


(bir_expLib)
bir_expScript + Syntax (relies on all before)
==============================================
- bir_exp_t =
     BExp_Const .. | BExp_Den .. | BExp_IfThenElse ..
   | BExp_UnaryExp .. | BExp_BinExp .. | BExp_BinPred .. | BExp_Cast ..
   | BExp_MemEq .. | BExp_Load .. | BExp_Store ..
(* single evaluation steps *)
- bir_eval_ifthenelse
- bir_eval_unary_exp / bir_eval_bin_exp / bir_eval_bin_pred / bir_eval_cast
- bir_eval_memeq / bir_eval_load / bir_eval_store
(* recursive evaluation *)
- bir_eval_exp





================================================================================================================
================================================================================================================
================================================================================================================
================================================================================================================


bir_programScript + Syntax (relies on allexp)
==============================================
(* labels *)
- bir_label_t = BL_Label string | BL_Address bir_imm_t
- bir_label_exp_t = BLE_Label bir_label_t | BLE_Exp bir_exp_t
(* statements *)
- bir_stmt_basic_t = BStmt_Declare .. | BStmt_Assign .. | BStmt_Assert .. | BStmt_Assume .. | BStmt_Observe ..
- bir_stmt_end_t = BStmt_Jmp .. | BStmt_CJmp .. | BStmt_Halt ..
- bir_stmt_t = BStmtB ('a bir_stmt_basic_t) | BStmtE bir_stmt_end_t
(* blocks and programs *)
- bir_block_t = <|
  bb_label          : bir_label_t ;
  bb_statements     : ('a bir_stmt_basic_t) list;
  bb_last_statement : bir_stmt_end_t |>
- bir_program_t = BirProgram (('a bir_block_t) list)
(* state *)
- bir_programcounter_t = <| bpc_label:bir_label_t; bpc_index:num |>
- bir_status_t = BST_Running | BST_Failed
    | BST_AssumptionViolated | BST_AssertionViolated | BST_Halted bir_val_t | BST_JumpOutside bir_label_t
- bir_state_t = <|
  bst_pc       : bir_programcounter_t;
  bst_environ  : bir_var_environment_t;
  bst_status   : bir_status_t |>
(* programs *)
- bir_labels_of_program (BirProgram p)
- bir_get_program_block_info_by_label (BirProgram p) l
(* pc *)
- bir_get_current_statement p pc
- bir_pc_next pc
- bir_block_pc l
- bir_pc_first (BirProgram p)
(* program state *)
- bir_state_is_terminated st
- bir_state_set_failed st
- bir_state_init p
(* basic statement semantics *)
- bir_declare_initial_value
- bir_exec_stmt_declare v ty (st : bir_state_t)
- bir_exec_stmt_assign v ex (st : bir_state_t)
- bir_exec_stmt_assert ex (st : bir_state_t)
- bir_exec_stmt_assume ex (st : bir_state_t)
- bir_exec_stmt_observe ec el obf (st : bir_state_t)
- bir_exec_stmt_observe_state ec (st : bir_state_t)
- bir_exec_stmtB_state stmt st
(* end statement semantics *)
- bir_exec_stmt_halt ex (st : bir_state_t)
- bir_exec_stmt_jmp_to_label p (l : bir_label_t) (st : bir_state_t)
- bir_eval_label_exp
- bir_exec_stmt_jmp p le (st : bir_state_t)
- bir_exec_stmt_cjmp p ex l1 l2 (st : bir_state_t)
- bir_exec_stmtE
(* statement semantics *)
- bir_exec_stmt
- bir_exec_stmt_state p stmt state
(* one step *)
- bir_exec_step p state
- bir_exec_step_state p state
(* multiple steps (helpers) *)
- bir_exec_infinite_steps_fun p st n
- bir_state_COUNT_PC (count_failing:bool, pc_cond) st
- bir_exec_infinite_steps_fun_COUNT_PCs
- bir_exec_infinite_steps_COUNT_STEPS
- bir_exec_steps_observe_llist p st step_no
(* full execution *)
- bir_execution_result_t = BER_Ended   ('o list) num num bir_state_t | BER_Looping ('o llist)
- IS_BER_Ended
- valOf_BER_Ended
- valOf_BER_Ended_steps
- bir_exec_steps_GEN pc_cond p state max_steps_opt
- bir_exec_steps p state
- bir_exec_step_n p state n
- bir_exec_block_n p state n
- bir_exec_to_labels_n ls p state n
- bir_exec_to_labels ls p state




================================================================================================================
================================================================================================================
================================================================================================================
================================================================================================================


bir_typing_expScript + Syntax (relies on allexp)
==============================================
- type_of_bir_exp
- bir_vars_of_exp
(* well-typed *)
- bir_var_set_is_well_typed vs
- bir_exp_is_well_typed e



bir_typing_progScript (relies on allexp + bir_typing_exp + bir_program)
==============================================
- bir_stmts_of_block bl
- bir_stmts_of_prog (BirProgram p)
(* well-typed *)
- bir_is_well_typed_label_exp
- bir_is_well_typed_stmtE
- bir_is_well_typed_stmtB
- bir_is_well_typed_stmt
- bir_is_well_typed_block bl
- bir_is_well_typed_program (BirProgram p)
(* variables *)
- bir_vars_of_stmtB
- bir_vars_of_label_exp
- bir_vars_of_stmtE
- bir_vars_of_stmt
- bir_vars_of_block bl
- bir_vars_of_program (BirProgram p)
(* modified variables *)
- bir_changed_vars_of_stmtB
- bir_changed_vars_of_stmt
- bir_changed_vars_of_block bl
- bir_changed_vars_of_program (BirProgram p)
(* program expressions *)
- bir_exps_of_stmtB
- bir_exps_of_label_exp
- bir_exps_of_stmtE
- bir_exps_of_stmt
- bir_exps_of_block bl
- bir_exps_of_program (BirProgram p)





HolBACoreSimps
==============================================
- simplifications based on definitions and rewrite theorems


